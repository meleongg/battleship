(()=>{"use strict";var e={434:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(537),s=n.n(a),i=n(645),r=n.n(i)()(s());r.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA;IACI,sBAAsB;AAC1B",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}"],sourceRoot:""}]);const c=r},772:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(537),s=n.n(a),i=n(645),r=n.n(i)()(s());r.push([e.id,"body {\n    font-family: 'Oxygen', sans-serif;\n    background-color: #003B73;\n    display: grid;\n    row-gap: 40px;\n    justify-content: center;\n    align-content: center;\n    color: #FFF;\n}\n\nheader {\n    padding-top: 40px;\n}\n\nnav {\n    text-align: center;\n}\n\n#title {\n    font-size: 40px;\n    font-weight: 700;\n}\n\n#status-message {\n    font-size: 25px;\n    text-align: center;\n}\n\n#boards {\n    width: 90vw;\n    /* height: 600px; */\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n#your-board, #ai-board {\n    width: 350px;\n    height: 350px;\n    background-color: #333;\n    row-gap: 1px;\n    column-gap: 1px;\n    border: #333 solid 10px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n.board-container {\n    display: flex;\n    flex-direction: column;\n    justify-items: center;\n    align-items: center;\n}\n\n.waters-title {\n    padding: 20px 0 20px 0;\n}\n\n#rotate-btn-container {\n    padding: 10px 0 10px 0;\n}\n\n#rotate-btn, #reset-btn {\n    font-size: 14px;\n    padding: 5px 10px;\n}\n\n#reset-game {\n    display: flex;\n    justify-content: center;\n    padding: 20px 0 20px 0;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n.square {\n    background-color: #FFF;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #333;\n}\n\n.square > * {\n    font-size: 25px;\n}\n\n.shot-before {\n    background-color: #808080;\n}\n\n.ship-sunk {\n    background-color: #DC143C;\n}\n\n.your-ship {\n    background-color: #808080;\n}\n\n.placement-hover {\n    background-color: #00FF00;\n}\n\n.placement-hover:hover {\n    cursor: pointer;\n}\n\n.invalid-placement {\n    background-color: #DC143C;\n}","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,yBAAyB;IACzB,aAAa;IACb,aAAa;IACb,uBAAuB;IACvB,qBAAqB;IACrB,WAAW;AACf;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,aAAa;IACb,qCAAqC;IACrC,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,uBAAuB;IACvB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,qBAAqB;IACrB,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:["body {\n    font-family: 'Oxygen', sans-serif;\n    background-color: #003B73;\n    display: grid;\n    row-gap: 40px;\n    justify-content: center;\n    align-content: center;\n    color: #FFF;\n}\n\nheader {\n    padding-top: 40px;\n}\n\nnav {\n    text-align: center;\n}\n\n#title {\n    font-size: 40px;\n    font-weight: 700;\n}\n\n#status-message {\n    font-size: 25px;\n    text-align: center;\n}\n\n#boards {\n    width: 90vw;\n    /* height: 600px; */\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n#your-board, #ai-board {\n    width: 350px;\n    height: 350px;\n    background-color: #333;\n    row-gap: 1px;\n    column-gap: 1px;\n    border: #333 solid 10px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n.board-container {\n    display: flex;\n    flex-direction: column;\n    justify-items: center;\n    align-items: center;\n}\n\n.waters-title {\n    padding: 20px 0 20px 0;\n}\n\n#rotate-btn-container {\n    padding: 10px 0 10px 0;\n}\n\n#rotate-btn, #reset-btn {\n    font-size: 14px;\n    padding: 5px 10px;\n}\n\n#reset-game {\n    display: flex;\n    justify-content: center;\n    padding: 20px 0 20px 0;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n.square {\n    background-color: #FFF;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #333;\n}\n\n.square > * {\n    font-size: 25px;\n}\n\n.shot-before {\n    background-color: #808080;\n}\n\n.ship-sunk {\n    background-color: #DC143C;\n}\n\n.your-ship {\n    background-color: #808080;\n}\n\n.placement-hover {\n    background-color: #00FF00;\n}\n\n.placement-hover:hover {\n    cursor: pointer;\n}\n\n.invalid-placement {\n    background-color: #DC143C;\n}"],sourceRoot:""}]);const c=r},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,s,i){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(a)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(r[d]=!0)}for(var l=0;l<e.length;l++){var o=[].concat(e[l]);a&&r[o[0]]||(void 0!==i&&(void 0===o[5]||(o[1]="@layer".concat(o[5].length>0?" ".concat(o[5]):""," {").concat(o[1],"}")),o[5]=i),n&&(o[2]?(o[1]="@media ".concat(o[2]," {").concat(o[1],"}"),o[2]=n):o[2]=n),s&&(o[4]?(o[1]="@supports (".concat(o[4],") {").concat(o[1],"}"),o[4]=s):o[4]="".concat(s)),t.push(o))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(s," */"),r=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(r).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var i={},r=[],c=0;c<e.length;c++){var d=e[c],l=a.base?d[0]+a.base:d[0],o=i[l]||0,u="".concat(l," ").concat(o);i[l]=o+1;var p=n(u),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var A=s(m,a);a.byIndex=c,t.splice(c,0,{identifier:u,updater:A,references:1})}r.push(u)}return r}function s(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,s){var i=a(e=e||[],s=s||{});return function(e){e=e||[];for(var r=0;r<i.length;r++){var c=n(i[r]);t[c].references--}for(var d=a(e,s),l=0;l<i.length;l++){var o=n(i[l]);0===t[o].references&&(t[o].updater(),t.splice(o,1))}i=d}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var s=void 0!==n.layer;s&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,s&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(a){var s=t[a];if(void 0!==s)return s.exports;var i=t[a]={id:a,exports:{}};return e[a](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{var e=n(379),t=n.n(e),a=n(795),s=n.n(a),i=n(569),r=n.n(i),c=n(565),d=n.n(c),l=n(216),o=n.n(l),u=n(589),p=n.n(u),m=n(434),A={};A.styleTagTransform=p(),A.setAttributes=d(),A.insert=r().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=o(),t()(m.Z,A),m.Z&&m.Z.locals&&m.Z.locals;var h=n(772),g={};g.styleTagTransform=p(),g.setAttributes=d(),g.insert=r().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=o(),t()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;const f=(e,t)=>{const n=e;let a=[];for(let e=0;e<t;e++)a.push("not hit");return{name:n,status:a,hit:e=>{a[e]="hit"},isSunk:()=>{for(let e=0;e<t;e++)if("not hit"===a[e])return!1;return!0}}};class v{constructor(e){this.board=(()=>{let e=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]];const t=f("destroyer",2),n=f("sub",3),a=f("cruiser",3),s=f("battleship",4),i=f("carrier",5);let r=[t,n,a,s,i],c={};const d=(t,n)=>{const a=t[0],s=t[1];return a+1>9?"y":e[a+1][s]===n||s+1>9?"x":"y"};return{ships:r,grid:e,placeShip:(t,n)=>{c[`${n.name}`]=t[0];for(let a=0;a<t.length;a++){let s=t[a],i=s[0],r=s[1];e[i][r]=n.name}},checkValidShot:(r,l)=>{if("miss"===e[r][l])return!1;if(""===e[r][l])return!0;{const o=e[r][l],u=c[o],p=u[0],m=u[1];let A;switch(A="x"===d(u,o)?r-p:l-m,o){case"destroyer":return"hit"!==t.status[A];case"sub":return"hit"!==n.status[A];case"cruiser":return"hit"!==a.status[A];case"battleship":return"hit"!==s.status[A];default:return"hit"!==i.status[A]}}},receiveAttack:r=>{const l=r[0],o=r[1];if(""!==e[l][o]&&"miss"!==e[l][o]){const r=e[l][o],u=c[r],p=u[0],m=u[1];let A;switch(A="x"===d(u,r)?l-p:o-m,r){case"destroyer":t.hit(A);break;case"sub":n.hit(A);break;case"cruiser":a.hit(A);break;case"battleship":s.hit(A);break;default:i.hit(A)}}else e[l][o]="miss"},isAllSunk:()=>{for(let e=0;e<r.length;e++)if(!r[e].isSunk())return!1;return!0},getContentByCoord:(t,n)=>e[t][n],getShipByName:e=>{for(let t=0;t<r.length;t++)if(r[t].name===e)return r[t]}}})(),this.turn=e}setTurn(e){this.turn=e}getBoard(){return this.board}getTurn(){return this.turn}}class y extends v{constructor(e){super(e)}}class B extends v{constructor(e){super(e)}makeMove(e,t){t.receiveAttack(e)}}const b=document.getElementById("rotate-btn"),C=document.getElementById("reset-btn"),L=(()=>{const e=(e,t)=>`your-square-${e}-${t}`,t=e=>{for(let t=0;t<e.length;t++)if(e[t].classList.contains("your-ship"))return!0;return!1};return C.addEventListener("click",(()=>{R.resetGame()})),b.addEventListener("click",(()=>{"x"===R.getRotationAxis()?R.setRotationAxis("y"):R.setRotationAxis("x")})),{detectSquareClick:e=>{e.addEventListener("click",(()=>{const t=e.id,n=j.getBoardName(t),a=j.getSquareCoords(t,n),s=R.getHumanBoard(),i=R.getAiBoard(),r=a[0],c=a[1];i.checkValidShot(r,c)&&R.checkValidTurn()&&!R.getGameOver()&&!R.stillPlacingHumanShips()&&(i.receiveAttack([r,c]),j.renderBoards(s,i),R.checkGameOver(),R.changeTurn())}))},detectSquareHover:n=>{n.addEventListener("mouseover",(()=>{if((()=>{for(let t=0;t<T;t++)for(let n=0;n<T;n++){const a=e(t,n),s=document.getElementById(a);s.classList.contains("placement-hover")&&s.classList.remove("placement-hover"),s.classList.contains("invalid-placement")&&s.classList.remove("invalid-placement")}})(),R.stillPlacingHumanShips()){const a=R.getCurrentShipPlacement();j.renderStatus(`Place your ${a}!`);const s=n.id,i=j.getBoardName(s),r=j.getSquareCoords(s,i),c=parseInt(r[0]),d=parseInt(r[1]);if("x"===R.getRotationAxis()){if("destroyer"===a){const t=document.getElementById(e(c,d)),n=document.getElementById(e(c+1,d));c<9?(t.classList.add("placement-hover"),n.classList.add("placement-hover")):t.classList.add("invalid-placement")}if("sub"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c+1,d)),s=document.getElementById(e(c+2,d));c<8?t([n,a,s])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===c?n.classList.add("invalid-placement"):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("cruiser"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c+1,d)),s=document.getElementById(e(c+2,d));c<8?t([n,a,s])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===c?n.classList.add("invalid-placement"):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("battleship"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c+1,d)),s=document.getElementById(e(c+2,d)),i=document.getElementById(e(c+3,d));c<7?t([n,a,s,i])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover")):9===c?n.classList.add("invalid-placement"):8===c?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement")):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"))}if("carrier"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c+1,d)),s=document.getElementById(e(c+2,d)),i=document.getElementById(e(c+3,d)),r=document.getElementById(e(c+4,d));c<6?t([n,a,s,i,r])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"),r.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover"),r.classList.add("placement-hover")):9===c?n.classList.add("invalid-placement"):8===c?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement")):7===c?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"))}}else{if("destroyer"===a){const t=document.getElementById(e(c,d)),n=document.getElementById(e(c,d+1));d<9?(t.classList.add("placement-hover"),n.classList.add("placement-hover")):t.classList.add("invalid-placement")}if("sub"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c,d+1)),s=document.getElementById(e(c,d+2));d<8?t([n,a,s])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===d?n.classList.add("invalid-placement"):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("cruiser"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c,d+1)),s=document.getElementById(e(c,d+2));d<8?t([n,a,s])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===d?n.classList.add("invalid-placement"):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("battleship"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c,d+1)),s=document.getElementById(e(c,d+2)),i=document.getElementById(e(c,d+3));d<7?t([n,a,s,i])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover")):9===d?n.classList.add("invalid-placement"):8===d?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement")):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"))}if("carrier"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c,d+1)),s=document.getElementById(e(c,d+2)),i=document.getElementById(e(c,d+3)),r=document.getElementById(e(c,d+4));d<6?t([n,a,s,i,r])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"),r.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover"),r.classList.add("placement-hover")):9===d?n.classList.add("invalid-placement"):8===d?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement")):7===d?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"))}}}else j.hideRotateBtn()}))},detectHumanSquareClick:t=>{t.addEventListener("click",(()=>{if(R.stillPlacingHumanShips()){const t=(()=>{let t=[];for(let n=0;n<T;n++)for(let a=0;a<T;a++){const s=e(n,a);document.getElementById(s).classList.contains("placement-hover")&&t.push([n,a])}return t})(),n=(()=>{for(let t=0;t<T;t++)for(let n=0;n<T;n++){const a=e(t,n);if(document.getElementById(a).classList.contains("invalid-placement"))return!1}return!0})(),a=R.getCurrentShipPlacement(),s=R.getShipByName(a),i=R.getHumanBoard(),r=R.getAiBoard();n&&R.humanPlaceShip(i,t,s),j.renderBoards(i,r)}}))},detectAiSquareHover:e=>{e.addEventListener("mouseover",(()=>{(()=>{for(let e=0;e<T;e++)for(let t=0;t<T;t++){const n=`ai-square-${e}-${t}`,a=document.getElementById(n);a.classList.contains("shot-before")||(a.style.backgroundColor="#FFF")}})(),R.getGameOver()||R.stillPlacingHumanShips()||e.classList.contains("miss")||e.classList.contains("shot-before")||(e.style.cursor="pointer",e.style.backgroundColor="#808080")}))}}})(),I=n.p+"ae34fa137741510dbffd.png",x=document.getElementById("status-message"),k=document.getElementById("your-board"),E=document.getElementById("ai-board"),S=document.getElementById("rotate-btn"),q=document.getElementById("rotate-btn-container"),w=document.getElementById("reset-btn");document.getElementById("icon").href=I;const T=10,j={renderStatus:e=>{x.innerText=e},renderBoards:(e,t)=>{k.innerHTML="",E.innerHTML="";for(let n=0;n<T;n++)for(let a=0;a<T;a++){let s=e.getContentByCoord(a,n),i=t.getContentByCoord(a,n);const r=document.createElement("div");if(r.classList.add("square"),r.id=`your-square-${a}-${n}`,k.appendChild(r),L.detectSquareHover(r),L.detectHumanSquareClick(r),"miss"===s){const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark"),r.classList.add("miss"),r.appendChild(e)}else if(""===s);else if(e.checkValidShot(a,n))r.classList.add("your-ship");else{r.classList.add("shot-before");const t=e.getContentByCoord(a,n);R.checkShipSunk("human",t)&&r.classList.add("ship-sunk");const s=document.createElement("i");s.classList.add("fa-solid"),s.classList.add("fa-xmark"),r.appendChild(s)}const c=document.createElement("div");if(c.classList.add("square"),c.id=`ai-square-${a}-${n}`,E.appendChild(c),L.detectSquareClick(c),L.detectAiSquareHover(c),"miss"===i){const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark"),c.classList.add("miss"),c.appendChild(e)}else if(""===i);else if(!t.checkValidShot(a,n)){c.classList.add("shot-before");const e=t.getContentByCoord(a,n);R.checkShipSunk("ai",e)&&c.classList.add("ship-sunk");const s=document.createElement("i");s.classList.add("fa-solid"),s.classList.add("fa-xmark"),c.appendChild(s)}}},getBoardName:e=>"y"===e[0]?"you":"ai",getSquareCoords:(e,t)=>{let n=[];if("you"===t){const t=e.substring(12,13),a=e.substring(14,15);n.push(t),n.push(a)}else{const t=e.substring(10,11),a=e.substring(12,13);n.push(t),n.push(a)}return n},renderResetBtn:()=>{w.style.display="block"},renderRotateBtn:()=>{S.style.display="block",q.style.display="block"},hideResetBtn:()=>{w.style.display="none"},hideRotateBtn:()=>{S.style.display="none",q.style.display="none"}},F=(e,t)=>Math.floor(Math.random()*(t-e+1)+e),R=(()=>{let e,t,n,a=f("destroyer",2),s=f("sub",3),i=f("cruiser",3),r=f("battleship",4),c=f("carrier",5),d=[a,s,i,r,c];const l=e=>{let t,n;return"destroyer"===e?(t=F(0,8),n=F(0,9),[[t,n],[t+1,n]]):"sub"===e?(t=F(0,7),n=F(0,9),[[t,n],[t+1,n],[t+2,n]]):"cruiser"===e?(t=F(0,6),n=F(0,9),[[t,n],[t+1,n],[t+2,n]]):"battleship"===e?(t=F(0,6),n=F(0,9),[[t,n],[t+1,n],[t+2,n],[t+3,n]]):"carrier"===e?(t=F(0,5),n=F(0,9),[[t,n],[t+1,n],[t+2,n],[t+3,n],[t+4,n]]):void 0},o=e=>{let t,n;return"destroyer"===e?(t=F(0,9),n=F(0,8),[[t,n],[t,n+1]]):"sub"===e?(t=F(0,9),n=F(0,7),[[t,n],[t,n+1],[t,n+2]]):"cruiser"===e?(t=F(0,9),n=F(0,6),[[t,n],[t,n+1],[t,n+2]]):"battleship"===e?(t=F(0,9),n=F(0,6),[[t,n],[t,n+1],[t,n+2],[t,n+3]]):"carrier"===e?(t=F(0,9),n=F(0,5),[[t,n],[t,n+1],[t,n+2],[t,n+3],[t,n+4]]):void 0},u=(e,t)=>{for(let n=0;n<e.length;n++){const a=e[n],s=a[0],i=a[1];t[s][i]=""}},p=(e,t,n)=>{const a=[];for(let s=0;s<t.length;s++){const i=t[s],r=i[0],c=i[1];if(""!==n[r][c])return u(a,n),!1;n[r][c]=e,a.push([r,c])}return!0};let m,A="x",h={destroyer:!1,sub:!1,cruiser:!1,battleship:!1,carrier:!1};const g=()=>{if(e){const e=v();j.renderStatus(`${e}`)}else t.getTurn()?(t.setTurn(!1),n.setTurn(!0),(e=>{let t=!1;const n=b(),a=C();for(;!t;){let n=F(0,9),a=F(0,9);e.checkValidShot(n,a)&&(e.receiveAttack([n,a]),t=!0)}j.renderBoards(n,a),L(),g()})(b())):(t.setTurn(!0),n.setTurn(!1))},v=()=>t.getBoard().isAllSunk()?"AI has won!":"You have won!",b=()=>t.getBoard(),C=()=>n.getBoard(),L=()=>{(t.getBoard().isAllSunk()||n.getBoard().isAllSunk())&&(e=!0,j.renderResetBtn())};return{resetGame:()=>{e=!1,(()=>{for(const e in h)h[e]=!1})(),t=new B(!0),n=new y(!1),t.setTurn(!0),n.setTurn(!1),j.renderStatus("Place your destroyer!"),j.renderRotateBtn(),j.hideResetBtn();const a=t.getBoard(),s=n.getBoard();(e=>{let t=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]];for(let n=0;n<d.length;n++){const a=d[n],s=a.name;let i=!1;for(;!i;){let n;n="x"==(0===Math.round(Math.random())?"x":"y")?l(s):o(s),p(s,n,t)&&(e.placeShip(n,a),i=!0)}}})(s),j.renderBoards(a,s)},changeTurn:g,checkValidTurn:()=>t.getTurn(),getHumanBoard:b,getAiBoard:C,checkGameOver:L,getGameOver:()=>e,checkShipSunk:(e,t)=>{const n=b(),a=C();return"human"===e?n.getShipByName(t).isSunk():a.getShipByName(t).isSunk()},stillPlacingHumanShips:()=>{for(const e in h)if(!h[e])return!0;return L()||j.renderStatus("It's your turn to attack!"),!1},setRotationAxis:e=>{A=e},getRotationAxis:()=>A,getCurrentShipPlacement:()=>{for(const e in h)if(!h[e])return m=e,m},getShipByName:e=>{switch(e){case"destroyer":return a;case"sub":return s;case"cruiser":return i;case"battleship":return r;default:return c}},humanPlaceShip:(e,t,n)=>{e.placeShip(t,n),h[n.name]=!0}}})();R.resetGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,