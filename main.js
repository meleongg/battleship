(()=>{"use strict";var e={434:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),s=t(645),a=t.n(s)()(o());a.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA;IACI,sBAAsB;AAC1B",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}"],sourceRoot:""}]);const i=a},772:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),s=t(645),a=t.n(s)()(o());a.push([e.id,"body {\n    font-family: 'Oxygen', sans-serif;\n    background-color: aqua;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#boards {\n    width: 90vw;\n    height: 600px;\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n#your-board, #ai-board {\n    width: 400px;\n    height: 400px;\n    background-color: #333;\n    row-gap: 1px;\n    column-gap: 1px;\n    border: #333 solid 10px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n#ai-board .square:hover:not(.shot-before):not(.miss) {\n    cursor: pointer;\n    background-color: #808080;\n}\n\n.square {\n    background-color: #FFF;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #333;\n}\n\n.square > * {\n    font-size: 35px;\n}\n\n.shot-before {\n    background-color: #808080;\n}\n\n.ship-sunk {\n    background-color: #DC143C;\n}\n\n.your-ship {\n    background-color: #808080;\n}","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,aAAa;IACb,qCAAqC;IACrC,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,uBAAuB;IACvB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,sBAAsB;IACtB,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:["body {\n    font-family: 'Oxygen', sans-serif;\n    background-color: aqua;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#boards {\n    width: 90vw;\n    height: 600px;\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n#your-board, #ai-board {\n    width: 400px;\n    height: 400px;\n    background-color: #333;\n    row-gap: 1px;\n    column-gap: 1px;\n    border: #333 solid 10px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n#ai-board .square:hover:not(.shot-before):not(.miss) {\n    cursor: pointer;\n    background-color: #808080;\n}\n\n.square {\n    background-color: #FFF;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #333;\n}\n\n.square > * {\n    font-size: 35px;\n}\n\n.shot-before {\n    background-color: #808080;\n}\n\n.ship-sunk {\n    background-color: #DC143C;\n}\n\n.your-ship {\n    background-color: #808080;\n}"],sourceRoot:""}]);const i=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,s){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&a[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(o," */"),a=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([s]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var s={},a=[],i=0;i<e.length;i++){var c=e[i],l=r.base?c[0]+r.base:c[0],d=s[l]||0,u="".concat(l," ").concat(d);s[l]=d+1;var A=t(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(p);else{var h=o(p,r);r.byIndex=i,n.splice(i,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var s=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<s.length;a++){var i=t(s[a]);n[i].references--}for(var c=r(e,o),l=0;l<s.length;l++){var d=t(s[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}s=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var s=t.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var s=n[r]={id:r,exports:{}};return e[r](s,s.exports,t),s.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),s=t(569),a=t.n(s),i=t(565),c=t.n(i),l=t(216),d=t.n(l),u=t(589),A=t.n(u),p=t(434),h={};h.styleTagTransform=A(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=d(),n()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;var f=t(772),m={};m.styleTagTransform=A(),m.setAttributes=c(),m.insert=a().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),n()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;const b=(e,n)=>{const t=e;let r=[];for(let e=0;e<n;e++)r.push("not hit");return{name:t,status:r,hit:e=>{r[e]="hit"},isSunk:()=>{for(let e=0;e<n;e++)if("not hit"===r[e])return!1;return!0}}};class g{constructor(e){this.board=(()=>{let e=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]];const n=b("destroyer",2),t=b("sub",3),r=b("cruiser",3),o=b("battleship",4),s=b("carrier",5);let a=[n,t,r,o,s],i={};const c=(n,t)=>{const r=n[0],o=n[1];return r+1>9?"y":e[r+1][o]===t||o+1>9?"x":"y"};return{ships:a,grid:e,placeShip:(n,t)=>{i[`${t.name}`]=n[0];for(let r=0;r<n.length;r++){let o=n[r],s=o[0],a=o[1];e[s][a]=t.name}},checkValidShot:(a,l)=>{if("miss"===e[a][l])return!1;if(""===e[a][l])return!0;{const d=e[a][l],u=i[d],A=u[0],p=u[1];let h;switch(h="x"===c(u,d)?a-A:l-p,d){case"destroyer":return"hit"!==n.status[h];case"sub":return"hit"!==t.status[h];case"cruiser":return"hit"!==r.status[h];case"battleship":return"hit"!==o.status[h];default:return"hit"!==s.status[h]}}},receiveAttack:a=>{const l=a[0],d=a[1];if(""!==e[l][d]&&"miss"!==e[l][d]){const a=e[l][d],u=i[a],A=u[0],p=u[1];let h;switch(h="x"===c(u,a)?l-A:d-p,a){case"destroyer":n.hit(h);break;case"sub":t.hit(h);break;case"cruiser":r.hit(h);break;case"battleship":o.hit(h);break;default:s.hit(h)}}else e[l][d]="miss"},isAllSunk:()=>{for(let e=0;e<a.length;e++)if(!a[e].isSunk())return!1;return!0},getContentByCoord:(n,t)=>e[n][t],getShipByName:e=>{for(let n=0;n<a.length;n++)if(a[n].name===e)return a[n]}}})(),this.turn=e}setTurn(e){this.turn=e}getBoard(){return this.board}getTurn(){return this.turn}}class C extends g{constructor(e){super(e)}}class y extends g{constructor(e){super(e)}makeMove(e,n){n.receiveAttack(e)}}const v=e=>{e.addEventListener("click",(()=>{const n=e.id,t=x.getBoardName(n),r=x.getSquareCoords(n,t),o=q.getHumanBoard(),s=q.getAiBoard(),a=r[0],i=r[1];s.checkValidShot(a,i)&&q.checkValidTurn()&&!q.getGameOver()&&(s.receiveAttack([a,i]),x.renderBoards(o,s),q.checkGameOver(),q.changeTurn())}))},B=document.getElementById("status-message"),k=document.getElementById("your-board"),I=document.getElementById("ai-board"),x={renderStatus:(e,n)=>{B.innerText=n?`${e} won!`:`It is now ${e} turn!`},renderBoards:(e,n)=>{k.innerHTML="",I.innerHTML="";for(let t=0;t<10;t++)for(let r=0;r<10;r++){let o=e.getContentByCoord(r,t),s=n.getContentByCoord(r,t);const a=document.createElement("div");if(a.classList.add("square"),a.id=`your-square-${r}-${t}`,k.appendChild(a),"miss"===o){const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark"),a.classList.add("miss"),a.appendChild(e)}else if(""===o);else if(e.checkValidShot(r,t))a.classList.add("your-ship");else{a.classList.add("shot-before");const n=e.getContentByCoord(r,t);q.checkShipSunk("human",n)&&a.classList.add("ship-sunk");const o=document.createElement("i");o.classList.add("fa-solid"),o.classList.add("fa-xmark"),a.appendChild(o)}const i=document.createElement("div");if(i.classList.add("square"),i.id=`ai-square-${r}-${t}`,I.appendChild(i),v(i),"miss"===s){const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark"),i.classList.add("miss"),i.appendChild(e)}else if(""===s);else if(!n.checkValidShot(r,t)){i.classList.add("shot-before");const e=n.getContentByCoord(r,t);q.checkShipSunk("ai",e)&&i.classList.add("ship-sunk");const o=document.createElement("i");o.classList.add("fa-solid"),o.classList.add("fa-xmark"),i.appendChild(o)}}},getBoardName:e=>"y"===e[0]?"you":"ai",getSquareCoords:(e,n)=>{let t=[];if("you"===n){const n=e.substring(12,13),r=e.substring(14,15);t.push(n),t.push(r)}else{const n=e.substring(10,11),r=e.substring(12,13);t.push(n),t.push(r)}return t}},S=(e,n)=>Math.floor(Math.random()*(n-e+1)+e),q=(()=>{let e,n=new y(!0),t=new C(!1),r=b("destroyer",2),o=b("sub",3),s=b("cruiser",3),a=b("battleship",4),i=b("carrier",5),c=[r,o,s,a,i];const l=e=>{let n,t;return"destroyer"===e?(n=S(0,8),t=S(0,9),[[n,t],[n+1,t]]):"sub"===e?(n=S(0,7),t=S(0,9),[[n,t],[n+1,t],[n+2,t]]):"cruiser"===e?(n=S(0,6),t=S(0,9),[[n,t],[n+1,t],[n+2,t]]):"battleship"===e?(n=S(0,6),t=S(0,9),[[n,t],[n+1,t],[n+2,t],[n+3,t]]):"carrier"===e?(n=S(0,5),t=S(0,9),[[n,t],[n+1,t],[n+2,t],[n+3,t],[n+4,t]]):void 0},d=e=>{let n,t;return"destroyer"===e?(n=S(0,9),t=S(0,8),[[n,t],[n,t+1]]):"sub"===e?(n=S(0,9),t=S(0,7),[[n,t],[n,t+1],[n,t+2]]):"cruiser"===e?(n=S(0,9),t=S(0,6),[[n,t],[n,t+1],[n,t+2]]):"battleship"===e?(n=S(0,9),t=S(0,6),[[n,t],[n,t+1],[n,t+2],[n,t+3]]):"carrier"===e?(n=S(0,9),t=S(0,5),[[n,t],[n,t+1],[n,t+2],[n,t+3],[n,t+4]]):void 0},u=(e,n)=>{for(let t=0;t<e.length;t++){const r=e[t],o=r[0],s=r[1];n[o][s]=""}},A=(e,n,t)=>{const r=[];for(let o=0;o<n.length;o++){const s=n[o],a=s[0],i=s[1];if(""!==t[a][i])return u(r,t),!1;t[a][i]=e,r.push([a,i])}return!0},p=()=>{if(e){const n=h();x.renderStatus(n,e)}else n.getTurn()?(n.setTurn(!1),t.setTurn(!0),x.renderStatus("AI's",e),(e=>{let n=!1;const t=f(),r=m();for(;!n;){let t=S(0,9),r=S(0,9);e.checkValidShot(t,r)&&(e.receiveAttack([t,r]),n=!0)}x.renderBoards(t,r),g(),p()})(f())):(n.setTurn(!0),t.setTurn(!1),x.renderStatus("your",e))},h=()=>n.getBoard().isAllSunk()?"AI has":"You have",f=()=>n.getBoard(),m=()=>t.getBoard(),g=()=>{(n.getBoard().isAllSunk()||t.getBoard().isAllSunk())&&(e=!0)};return{resetGame:()=>{e=!1,n.setTurn(!0),t.setTurn(!1),x.renderStatus("your",e);const u=n.getBoard(),p=t.getBoard();var h;(e=>{let n=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]];for(let t=0;t<c.length;t++){const r=c[t],o=r.name;let s=!1;for(;!s;){let t;t="x"==(0===Math.round(Math.random())?"x":"y")?l(o):d(o),A(o,t,n)&&(e.placeShip(t,r),s=!0)}}})(u),(h=p).placeShip([[0,0],[1,0]],r),h.placeShip([[2,0],[3,0],[4,0]],o),h.placeShip([[5,0],[6,0],[7,0]],s),h.placeShip([[0,1],[0,2],[0,3],[0,4]],a),h.placeShip([[0,5],[0,6],[0,7],[0,8],[0,9]],i),x.renderBoards(u,p)},changeTurn:p,checkValidTurn:()=>n.getTurn(),getHumanBoard:f,getAiBoard:m,checkGameOver:g,getGameOver:()=>e,checkShipSunk:(e,n)=>{const t=f(),r=m();return"human"===e?t.getShipByName(n).isSunk():r.getShipByName(n).isSunk()}}})();console.log("hello world"),q.resetGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,