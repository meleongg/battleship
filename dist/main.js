(()=>{"use strict";var e={434:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(537),s=n.n(a),r=n(645),i=n.n(r)()(s());i.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA;IACI,sBAAsB;AAC1B",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}"],sourceRoot:""}]);const o=i},772:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(537),s=n.n(a),r=n(645),i=n.n(r)()(s());i.push([e.id,"body {\n    font-family: 'Oxygen', sans-serif;\n    background-color: aqua;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#boards {\n    width: 90vw;\n    height: 600px;\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n#your-board, #ai-board {\n    width: 400px;\n    height: 400px;\n    background-color: #333;\n    row-gap: 1px;\n    column-gap: 1px;\n    border: #333 solid 10px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n#ai-board .square:hover:not(.shot-before):not(.miss) {\n    cursor: pointer;\n    background-color: #808080;\n}\n\n.square {\n    background-color: #FFF;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #333;\n}\n\n.square > * {\n    font-size: 35px;\n}\n\n.shot-before {\n    background-color: #808080;\n}\n\n.ship-sunk {\n    background-color: #DC143C;\n}\n\n.your-ship {\n    background-color: #808080;\n}\n\n.placement-hover {\n    background-color: #00FF00;\n}\n\n.invalid-placement {\n    background-color: #DC143C;\n}","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,aAAa;IACb,qCAAqC;IACrC,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,uBAAuB;IACvB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,sBAAsB;IACtB,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:["body {\n    font-family: 'Oxygen', sans-serif;\n    background-color: aqua;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#boards {\n    width: 90vw;\n    height: 600px;\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n#your-board, #ai-board {\n    width: 400px;\n    height: 400px;\n    background-color: #333;\n    row-gap: 1px;\n    column-gap: 1px;\n    border: #333 solid 10px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n#ai-board .square:hover:not(.shot-before):not(.miss) {\n    cursor: pointer;\n    background-color: #808080;\n}\n\n.square {\n    background-color: #FFF;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #333;\n}\n\n.square > * {\n    font-size: 35px;\n}\n\n.shot-before {\n    background-color: #808080;\n}\n\n.ship-sunk {\n    background-color: #DC143C;\n}\n\n.your-ship {\n    background-color: #808080;\n}\n\n.placement-hover {\n    background-color: #00FF00;\n}\n\n.invalid-placement {\n    background-color: #DC143C;\n}"],sourceRoot:""}]);const o=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,s,r){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(a)for(var o=0;o<this.length;o++){var c=this[o][0];null!=c&&(i[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);a&&i[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),s&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=s):l[4]="".concat(s)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(s," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var r={},i=[],o=0;o<e.length;o++){var c=e[o],d=a.base?c[0]+a.base:c[0],l=r[d]||0,u="".concat(d," ").concat(l);r[d]=l+1;var m=n(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==m)t[m].references++,t[m].updater(p);else{var A=s(p,a);a.byIndex=o,t.splice(o,0,{identifier:u,updater:A,references:1})}i.push(u)}return i}function s(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,s){var r=a(e=e||[],s=s||{});return function(e){e=e||[];for(var i=0;i<r.length;i++){var o=n(r[i]);t[o].references--}for(var c=a(e,s),d=0;d<r.length;d++){var l=n(r[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}r=c}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var s=void 0!==n.layer;s&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,s&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(a){var s=t[a];if(void 0!==s)return s.exports;var r=t[a]={id:a,exports:{}};return e[a](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),a=n(795),s=n.n(a),r=n(569),i=n.n(r),o=n(565),c=n.n(o),d=n(216),l=n.n(d),u=n(589),m=n.n(u),p=n(434),A={};A.styleTagTransform=m(),A.setAttributes=c(),A.insert=i().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=l(),t()(p.Z,A),p.Z&&p.Z.locals&&p.Z.locals;var h=n(772),g={};g.styleTagTransform=m(),g.setAttributes=c(),g.insert=i().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=l(),t()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;const f=(e,t)=>{const n=e;let a=[];for(let e=0;e<t;e++)a.push("not hit");return{name:n,status:a,hit:e=>{a[e]="hit"},isSunk:()=>{for(let e=0;e<t;e++)if("not hit"===a[e])return!1;return!0}}};class v{constructor(e){this.board=(()=>{let e=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]];const t=f("destroyer",2),n=f("sub",3),a=f("cruiser",3),s=f("battleship",4),r=f("carrier",5);let i=[t,n,a,s,r],o={};const c=(t,n)=>{const a=t[0],s=t[1];return a+1>9?"y":e[a+1][s]===n||s+1>9?"x":"y"};return{ships:i,grid:e,placeShip:(t,n)=>{o[`${n.name}`]=t[0];for(let a=0;a<t.length;a++){let s=t[a],r=s[0],i=s[1];e[r][i]=n.name}},checkValidShot:(i,d)=>{if("miss"===e[i][d])return!1;if(""===e[i][d])return!0;{const l=e[i][d],u=o[l],m=u[0],p=u[1];let A;switch(A="x"===c(u,l)?i-m:d-p,l){case"destroyer":return"hit"!==t.status[A];case"sub":return"hit"!==n.status[A];case"cruiser":return"hit"!==a.status[A];case"battleship":return"hit"!==s.status[A];default:return"hit"!==r.status[A]}}},receiveAttack:i=>{const d=i[0],l=i[1];if(""!==e[d][l]&&"miss"!==e[d][l]){const i=e[d][l],u=o[i],m=u[0],p=u[1];let A;switch(A="x"===c(u,i)?d-m:l-p,i){case"destroyer":t.hit(A);break;case"sub":n.hit(A);break;case"cruiser":a.hit(A);break;case"battleship":s.hit(A);break;default:r.hit(A)}}else e[d][l]="miss"},isAllSunk:()=>{for(let e=0;e<i.length;e++)if(!i[e].isSunk())return!1;return!0},getContentByCoord:(t,n)=>e[t][n],getShipByName:e=>{for(let t=0;t<i.length;t++)if(i[t].name===e)return i[t]}}})(),this.turn=e}setTurn(e){this.turn=e}getBoard(){return this.board}getTurn(){return this.turn}}class y extends v{constructor(e){super(e)}}class b extends v{constructor(e){super(e)}makeMove(e,t){t.receiveAttack(e)}}const C=document.getElementById("rotate-btn"),B=(()=>{const e=(e,t)=>`your-square-${e}-${t}`;return C.addEventListener("click",(()=>{"x"===q.getRotationAxis()?q.setRotationAxis("y"):q.setRotationAxis("x")})),{detectSquareClick:e=>{e.addEventListener("click",(()=>{const t=e.id,n=x.getBoardName(t),a=x.getSquareCoords(t,n),s=q.getHumanBoard(),r=q.getAiBoard(),i=a[0],o=a[1];r.checkValidShot(i,o)&&q.checkValidTurn()&&!q.getGameOver()&&(r.receiveAttack([i,o]),x.renderBoards(s,r),q.checkGameOver(),q.changeTurn())}))},detectSquareHover:t=>{t.addEventListener("mouseover",(()=>{if((()=>{for(let t=0;t<E;t++)for(let n=0;n<E;n++){const a=e(t,n),s=document.getElementById(a);s.classList.contains("placement-hover")&&s.classList.remove("placement-hover"),s.classList.contains("invalid-placement")&&s.classList.remove("invalid-placement")}})(),q.stillPlacingHumanShips()){const n=q.getCurrentShipPlacement(),a=t.id,s=x.getBoardName(a),r=x.getSquareCoords(a,s),i=parseInt(r[0]),o=parseInt(r[1]);if("x"===q.getRotationAxis()){if("destroyer"===n){const t=document.getElementById(e(i,o)),n=document.getElementById(e(i+1,o));i<9?(t.classList.add("placement-hover"),n.classList.add("placement-hover")):t.classList.add("invalid-placement")}if("sub"===n){const t=document.getElementById(e(i,o)),n=document.getElementById(e(i+1,o)),a=document.getElementById(e(i+2,o));i<8?(t.classList.add("placement-hover"),n.classList.add("placement-hover"),a.classList.add("placement-hover")):9===i?t.classList.add("invalid-placement"):(t.classList.add("invalid-placement"),n.classList.add("invalid-placement"))}if("cruiser"===n){const t=document.getElementById(e(i,o)),n=document.getElementById(e(i+1,o)),a=document.getElementById(e(i+2,o));i<8?(t.classList.add("placement-hover"),n.classList.add("placement-hover"),a.classList.add("placement-hover")):9===i?t.classList.add("invalid-placement"):(t.classList.add("invalid-placement"),n.classList.add("invalid-placement"))}if("battleship"===n){const t=document.getElementById(e(i,o)),n=document.getElementById(e(i+1,o)),a=document.getElementById(e(i+2,o)),s=document.getElementById(e(i+3,o));i<7?(t.classList.add("placement-hover"),n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===i?t.classList.add("invalid-placement"):8===i?(t.classList.add("invalid-placement"),n.classList.add("invalid-placement")):(t.classList.add("invalid-placement"),n.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("carrier"===n){const t=document.getElementById(e(i,o)),n=document.getElementById(e(i+1,o)),a=document.getElementById(e(i+2,o)),s=document.getElementById(e(i+3,o)),r=document.getElementById(e(i+4,o));i<6?(t.classList.add("placement-hover"),n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),r.classList.add("placement-hover")):9===i?t.classList.add("invalid-placement"):8===i?(t.classList.add("invalid-placement"),n.classList.add("invalid-placement")):7===i?(t.classList.add("invalid-placement"),n.classList.add("invalid-placement"),a.classList.add("invalid-placement")):(t.classList.add("invalid-placement"),n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"))}}else{if("destroyer"===n){const t=document.getElementById(e(i,o)),n=document.getElementById(e(i,o+1));o<9?(t.classList.add("placement-hover"),n.classList.add("placement-hover")):t.classList.add("invalid-placement")}if("sub"===n){const t=document.getElementById(e(i,o)),n=document.getElementById(e(i,o+1)),a=document.getElementById(e(i,o+2));o<8?(t.classList.add("placement-hover"),n.classList.add("placement-hover"),a.classList.add("placement-hover")):9===o?t.classList.add("invalid-placement"):(t.classList.add("invalid-placement"),n.classList.add("invalid-placement"))}if("cruiser"===n){const t=document.getElementById(e(i,o)),n=document.getElementById(e(i,o+1)),a=document.getElementById(e(i,o+2));o<8?(t.classList.add("placement-hover"),n.classList.add("placement-hover"),a.classList.add("placement-hover")):9===o?t.classList.add("invalid-placement"):(t.classList.add("invalid-placement"),n.classList.add("invalid-placement"))}if("battleship"===n){const t=document.getElementById(e(i,o)),n=document.getElementById(e(i,o+1)),a=document.getElementById(e(i,o+2)),s=document.getElementById(e(i,o+3));o<7?(t.classList.add("placement-hover"),n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===o?t.classList.add("invalid-placement"):8===o?(t.classList.add("invalid-placement"),n.classList.add("invalid-placement")):(t.classList.add("invalid-placement"),n.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("carrier"===n){const t=document.getElementById(e(i,o)),n=document.getElementById(e(i,o+1)),a=document.getElementById(e(i,o+2)),s=document.getElementById(e(i,o+3)),r=document.getElementById(e(i,o+4));o<6?(t.classList.add("placement-hover"),n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),r.classList.add("placement-hover")):9===o?t.classList.add("invalid-placement"):8===o?(t.classList.add("invalid-placement"),n.classList.add("invalid-placement")):7===o?(t.classList.add("invalid-placement"),n.classList.add("invalid-placement"),a.classList.add("invalid-placement")):(t.classList.add("invalid-placement"),n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"))}}}else C.style.display="none"}))},detectHumanSquareClick:e=>{q.stillPlacingHumanShips()}}})(),L=document.getElementById("status-message"),I=document.getElementById("your-board"),k=document.getElementById("ai-board"),E=10,x={renderStatus:(e,t)=>{L.innerText=t?`${e} won!`:`It is now ${e} turn!`},renderBoards:(e,t)=>{I.innerHTML="",k.innerHTML="";for(let n=0;n<E;n++)for(let a=0;a<E;a++){let s=e.getContentByCoord(a,n),r=t.getContentByCoord(a,n);const i=document.createElement("div");if(i.classList.add("square"),i.id=`your-square-${a}-${n}`,I.appendChild(i),B.detectSquareHover(i),B.detectHumanSquareClick(i),"miss"===s){const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark"),i.classList.add("miss"),i.appendChild(e)}else if(""===s);else if(e.checkValidShot(a,n))i.classList.add("your-ship");else{i.classList.add("shot-before");const t=e.getContentByCoord(a,n);q.checkShipSunk("human",t)&&i.classList.add("ship-sunk");const s=document.createElement("i");s.classList.add("fa-solid"),s.classList.add("fa-xmark"),i.appendChild(s)}const o=document.createElement("div");if(o.classList.add("square"),o.id=`ai-square-${a}-${n}`,k.appendChild(o),B.detectSquareClick(o),"miss"===r){const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark"),o.classList.add("miss"),o.appendChild(e)}else if(""===r);else if(!t.checkValidShot(a,n)){o.classList.add("shot-before");const e=t.getContentByCoord(a,n);q.checkShipSunk("ai",e)&&o.classList.add("ship-sunk");const s=document.createElement("i");s.classList.add("fa-solid"),s.classList.add("fa-xmark"),o.appendChild(s)}}},getBoardName:e=>"y"===e[0]?"you":"ai",getSquareCoords:(e,t)=>{let n=[];if("you"===t){const t=e.substring(12,13),a=e.substring(14,15);n.push(t),n.push(a)}else{const t=e.substring(10,11),a=e.substring(12,13);n.push(t),n.push(a)}return n}},S=(e,t)=>Math.floor(Math.random()*(t-e+1)+e),q=(()=>{let e,t,n=new b(!0),a=new y(!1),s=f("destroyer",2),r=f("sub",3),i=f("cruiser",3),o=f("battleship",4),c=f("carrier",5),d="x",l={destroyer:!1,sub:!1,cruiser:!1,battleship:!1,carrier:!1};const u=()=>{if(e){const t=m();x.renderStatus(t,e)}else n.getTurn()?(n.setTurn(!1),a.setTurn(!0),x.renderStatus("AI's",e),(e=>{let t=!1;const n=p(),a=A();for(;!t;){let n=S(0,9),a=S(0,9);e.checkValidShot(n,a)&&(e.receiveAttack([n,a]),t=!0)}x.renderBoards(n,a),h(),u()})(p())):(n.setTurn(!0),a.setTurn(!1),x.renderStatus("your",e))},m=()=>n.getBoard().isAllSunk()?"AI has":"You have",p=()=>n.getBoard(),A=()=>a.getBoard(),h=()=>{(n.getBoard().isAllSunk()||a.getBoard().isAllSunk())&&(e=!0)};return{resetGame:()=>{e=!1,n.setTurn(!0),a.setTurn(!1),x.renderStatus("your",e);const t=n.getBoard(),d=a.getBoard();var l;(l=d).placeShip([[0,0],[1,0]],s),l.placeShip([[2,0],[3,0],[4,0]],r),l.placeShip([[5,0],[6,0],[7,0]],i),l.placeShip([[0,1],[0,2],[0,3],[0,4]],o),l.placeShip([[0,5],[0,6],[0,7],[0,8],[0,9]],c),x.renderBoards(t,d)},changeTurn:u,checkValidTurn:()=>n.getTurn(),getHumanBoard:p,getAiBoard:A,checkGameOver:h,getGameOver:()=>e,checkShipSunk:(e,t)=>{const n=p(),a=A();return"human"===e?n.getShipByName(t).isSunk():a.getShipByName(t).isSunk()},stillPlacingHumanShips:()=>!0,setRotationAxis:e=>{d=e},getRotationAxis:()=>d,getCurrentShipPlacement:()=>{for(const e in l)if(!l[e])return t=e,t}}})();q.resetGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,