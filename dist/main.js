(()=>{"use strict";var e={434:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),o=n.n(r),s=n(645),a=n.n(s)()(o());a.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA;IACI,sBAAsB;AAC1B",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}"],sourceRoot:""}]);const i=a},772:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),o=n.n(r),s=n(645),a=n.n(s)()(o());a.push([e.id,"body {\n    font-family: 'Oxygen', sans-serif;\n    background-color: aqua;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#boards {\n    width: 90vw;\n    height: 600px;\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n#your-board, #ai-board {\n    width: 400px;\n    height: 400px;\n    background-color: #333;\n    row-gap: 1px;\n    column-gap: 1px;\n    border: #333 solid 10px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n.square:hover {\n    cursor: pointer;\n}\n\n.square {\n    background-color: #FFF;\n    height: 100%;\n    width: 100%;\n}\n\n.shot-before {\n    background-color: #808080;\n}","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,aAAa;IACb,qCAAqC;IACrC,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,uBAAuB;IACvB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:["body {\n    font-family: 'Oxygen', sans-serif;\n    background-color: aqua;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#boards {\n    width: 90vw;\n    height: 600px;\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n#your-board, #ai-board {\n    width: 400px;\n    height: 400px;\n    background-color: #333;\n    row-gap: 1px;\n    column-gap: 1px;\n    border: #333 solid 10px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n.square:hover {\n    cursor: pointer;\n}\n\n.square {\n    background-color: #FFF;\n    height: 100%;\n    width: 100%;\n}\n\n.shot-before {\n    background-color: #808080;\n}"],sourceRoot:""}]);const i=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,s){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&a[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(o," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var s={},a=[],i=0;i<e.length;i++){var c=e[i],l=r.base?c[0]+r.base:c[0],d=s[l]||0,u="".concat(l," ").concat(d);s[l]=d+1;var A=n(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var f=o(p,r);r.byIndex=i,t.splice(i,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var s=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<s.length;a++){var i=n(s[a]);t[i].references--}for(var c=r(e,o),l=0;l<s.length;l++){var d=n(s[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}s=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var s=t[r]={id:r,exports:{}};return e[r](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),s=n(569),a=n.n(s),i=n(565),c=n.n(i),l=n(216),d=n.n(l),u=n(589),A=n.n(u),p=n(434),f={};f.styleTagTransform=A(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=d(),t()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;var h=n(772),m={};m.styleTagTransform=A(),m.setAttributes=c(),m.insert=a().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),t()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;const g=(e,t)=>{const n=e;let r=[];for(let e=0;e<t;e++)r.push("not hit");return{name:n,status:r,hit:e=>{r[e]="hit"},isSunk:()=>{for(let e=0;e<t;e++)if("not hit"===r[e])return!1;return!0}}};class b{constructor(e){this.board=(()=>{let e=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]];const t=g("destroyer",2),n=g("sub",3),r=g("cruiser",3),o=g("battleship",4),s=g("carrier",5);let a=[t,n,r,o,s],i={};const c=(t,n)=>{const r=t[0],o=t[1];return e[r+1][o]===n?"x":"y"};return{ships:a,grid:e,placeShip:(t,n)=>{i[`${n.name}`]=t[0];for(let r=0;r<t.length;r++){let o=t[r],s=o[0],a=o[1];e[s][a]=n.name}},checkValidShot:(a,l)=>{if("miss"===e[a][l])return!1;if(""===e[a][l])return!0;{const d=e[a][l],u=i[d],A=u[0],p=u[1];let f;switch(f="x"===c(u,d)?a-A:l-p,d){case"destroyer":return"hit"!==t.status[f];case"sub":return"hit"!==n.status[f];case"cruiser":return"hit"!==r.status[f];case"battleship":return"hit"!==o.status[f];default:return"hit"!==s.status[f]}}},receiveAttack:a=>{const l=a[0],d=a[1];if(""!==e[l][d]&&"miss"!==e[l][d]){const a=e[l][d],u=i[a],A=u[0],p=u[1];let f;switch(f="x"===c(u,a)?l-A:d-p,a){case"destroyer":t.hit(f);case"sub":n.hit(f);case"cruiser":r.hit(f);case"battleship":o.hit(f);default:s.hit(f)}}else e[d][l]="miss"},isAllSunk:()=>{for(let e=0;e<a.length;e++)if(!a[e].isSunk())return!1;return!0},getContentByCoord:(t,n)=>e[t][n]}})(),this.turn=e}setTurn(e){this.turn=e}getBoard(){return this.board}getTurn(){return this.turn}}class C extends b{constructor(e){super(e)}}class y extends b{constructor(e){super(e)}makeMove(e,t){t.receiveAttack(e)}}const v=e=>{e.addEventListener("click",(()=>{const t=e.id,n=x.getBoardName(t),r=x.getSquareCoords(t,n),o=w.getAiBoard(),s=r[0],a=r[1];o.checkValidShot(s,a)&&w.checkValidTurn(n)&&(o.receiveAttack([s,a]),x.renderBoards()),w.changeTurn(),console.log("detecting")}))},B=document.getElementById("status-message"),k=document.getElementById("your-board"),I=document.getElementById("ai-board"),x={renderStatus:(e,t)=>{B.innerText=t?`${e} has won!`:`It is now ${e} turn!`},renderBoards:(e,t)=>{k.innerHTML="",I.innerHTML="";for(let n=0;n<10;n++)for(let r=0;r<10;r++){let o=e.getContentByCoord(n,r),s=t.getContentByCoord(n,r);const a=document.createElement("div");if(a.classList.add("square"),a.id=`your-square-${n}-${r}`,k.appendChild(a),v(a),"miss"===o){const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark-large")}else if(""===o);else if(!e.checkValidShot(n,r)){a.classList.add("shot-before");const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark-large")}const i=document.createElement("div");if(i.classList.add("square"),i.id=`ai-square-${n}-${r}`,I.appendChild(i),v(i),"miss"===s){const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark-large")}else if(""===s);else if(!t.checkValidShot(n,r)){i.classList.add("shot-before");const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark-large")}}},getBoardName:e=>"y"===e[0]?"you":"ai",getSquareCoords:(e,t)=>{let n=[];if("you"===t){const t=e.substring(12,14),r=e.substring(16,18);n.push(t),n.push(r)}else{const t=e.substring(10,12),r=e.substring(14,16);n.push(t),n.push(r)}return n}},q=e=>{let t=g("destroyer",2),n=g("sub",3),r=g("cruiser",3),o=g("battleship",4),s=g("carrier",5);e.placeShip([[0,0],[1,0]],t),e.placeShip([[2,0],[3,0],[4,0]],n),e.placeShip([[5,0],[6,0],[7,0]],r),e.placeShip([[0,1],[0,2],[0,3],[0,4]],o),e.placeShip([[0,5],[0,6],[0,7],[0,8],[0,9]],s)},S=()=>Math.floor(10*Math.random()),w=(()=>{let e=!1,t=new y(!0),n=new C(!1);const r=e=>{let t=!1;for(;!t;){let n=S(),r=S();e.checkValidShot(n,r)&&(e.receiveAttack([n,r]),t=!0)}},o=()=>{t.getTurn()?(t.setTurn(!1),n.setTurn(!0),x.renderStatus("AI's",e)):(t.setTurn(!0),n.setTurn(!1),x.renderStatus("your",e))},s=()=>{e=!(!t.getBoard().isAllSunk()&&!n.getBoard().isAllSunk())};return{resetGame:()=>{t.setTurn(!0),n.setTurn(!1),x.renderStatus("your",e);let a=t.getBoard(),i=n.getBoard();for(q(a),q(i),x.renderBoards(a,i);!s;)t.getTurn()||(r(a),x.renderBoards(a,i),o())},changeTurn:o,checkValidTurn:e=>"you"===e?t.getTurn():n.getTurn(),getAiBoard:()=>n.getBoard()}})();console.log("hello world"),w.resetGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,