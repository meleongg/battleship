(()=>{"use strict";var e={434:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(537),s=n.n(a),i=n(645),r=n.n(i)()(s());r.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA;IACI,sBAAsB;AAC1B",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}"],sourceRoot:""}]);const d=r},772:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(537),s=n.n(a),i=n(645),r=n.n(i)()(s());r.push([e.id,"body {\n    font-family: 'Oxygen', sans-serif;\n    background-color: #003B73;\n    display: grid;\n    row-gap: 40px;\n    justify-content: center;\n    align-content: center;\n    color: #FFF;\n}\n\nheader {\n    padding-top: 40px;\n}\n\nnav {\n    text-align: center;\n}\n\n#title {\n    font-size: 40px;\n    font-weight: 700;\n}\n\n#status-container {\n    border: 2px solid #FFF;\n    padding: 20px 0;\n    width: 400px;\n    margin: 0 auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #333;\n}\n\n#status-message {\n    font-size: 25px;\n    text-align: center;\n}\n\n#boards {\n    width: 90vw;\n    /* height: 600px; */\n    display: grid;\n    grid-template-columns: 1fr;\n    justify-items: center;\n    align-content: center;\n}\n\n#your-board, #ai-board {\n    width: 350px;\n    height: 350px;\n    background-color: #333;\n    row-gap: 1px;\n    column-gap: 1px;\n    border: #333 solid 10px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n.board-container {\n    display: flex;\n    flex-direction: column;\n    justify-items: center;\n    align-items: center;\n}\n\n.waters-title {\n    padding: 20px 0 20px 0;\n}\n\n#rotate-btn-container {\n    padding: 10px 0 10px 0;\n}\n\n#rotate-btn, #reset-btn {\n    font-size: 14px;\n    padding: 5px 10px;\n}\n\n#reset-game {\n    display: flex;\n    justify-content: center;\n    padding: 20px 0 20px 0;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n.square {\n    background-color: #FFF;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #333;\n}\n\n.square > * {\n    font-size: 25px;\n}\n\n.shot-before {\n    background-color: #808080;\n}\n\n.ship-sunk {\n    background-color: #DC143C;\n}\n\n.your-ship {\n    background-color: #808080;\n}\n\n.placement-hover {\n    background-color: #00FF00;\n}\n\n.placement-hover:hover {\n    cursor: pointer;\n}\n\n.invalid-placement {\n    background-color: #DC143C;\n}","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,yBAAyB;IACzB,aAAa;IACb,aAAa;IACb,uBAAuB;IACvB,qBAAqB;IACrB,WAAW;AACf;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,YAAY;IACZ,cAAc;IACd,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,aAAa;IACb,0BAA0B;IAC1B,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,uBAAuB;IACvB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,qBAAqB;IACrB,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:["body {\n    font-family: 'Oxygen', sans-serif;\n    background-color: #003B73;\n    display: grid;\n    row-gap: 40px;\n    justify-content: center;\n    align-content: center;\n    color: #FFF;\n}\n\nheader {\n    padding-top: 40px;\n}\n\nnav {\n    text-align: center;\n}\n\n#title {\n    font-size: 40px;\n    font-weight: 700;\n}\n\n#status-container {\n    border: 2px solid #FFF;\n    padding: 20px 0;\n    width: 400px;\n    margin: 0 auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #333;\n}\n\n#status-message {\n    font-size: 25px;\n    text-align: center;\n}\n\n#boards {\n    width: 90vw;\n    /* height: 600px; */\n    display: grid;\n    grid-template-columns: 1fr;\n    justify-items: center;\n    align-content: center;\n}\n\n#your-board, #ai-board {\n    width: 350px;\n    height: 350px;\n    background-color: #333;\n    row-gap: 1px;\n    column-gap: 1px;\n    border: #333 solid 10px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n.board-container {\n    display: flex;\n    flex-direction: column;\n    justify-items: center;\n    align-items: center;\n}\n\n.waters-title {\n    padding: 20px 0 20px 0;\n}\n\n#rotate-btn-container {\n    padding: 10px 0 10px 0;\n}\n\n#rotate-btn, #reset-btn {\n    font-size: 14px;\n    padding: 5px 10px;\n}\n\n#reset-game {\n    display: flex;\n    justify-content: center;\n    padding: 20px 0 20px 0;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n.square {\n    background-color: #FFF;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #333;\n}\n\n.square > * {\n    font-size: 25px;\n}\n\n.shot-before {\n    background-color: #808080;\n}\n\n.ship-sunk {\n    background-color: #DC143C;\n}\n\n.your-ship {\n    background-color: #808080;\n}\n\n.placement-hover {\n    background-color: #00FF00;\n}\n\n.placement-hover:hover {\n    cursor: pointer;\n}\n\n.invalid-placement {\n    background-color: #DC143C;\n}"],sourceRoot:""}]);const d=r},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,s,i){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(a)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(r[c]=!0)}for(var o=0;o<e.length;o++){var l=[].concat(e[o]);a&&r[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),s&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=s):l[4]="".concat(s)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(s," */"),r=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(r).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var i={},r=[],d=0;d<e.length;d++){var c=e[d],o=a.base?c[0]+a.base:c[0],l=i[o]||0,u="".concat(o," ").concat(l);i[o]=l+1;var p=n(u),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var m=s(A,a);a.byIndex=d,t.splice(d,0,{identifier:u,updater:m,references:1})}r.push(u)}return r}function s(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,s){var i=a(e=e||[],s=s||{});return function(e){e=e||[];for(var r=0;r<i.length;r++){var d=n(i[r]);t[d].references--}for(var c=a(e,s),o=0;o<i.length;o++){var l=n(i[o]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=c}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var s=void 0!==n.layer;s&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,s&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(a){var s=t[a];if(void 0!==s)return s.exports;var i=t[a]={id:a,exports:{}};return e[a](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{var e=n(379),t=n.n(e),a=n(795),s=n.n(a),i=n(569),r=n.n(i),d=n(565),c=n.n(d),o=n(216),l=n.n(o),u=n(589),p=n.n(u),A=n(434),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=r().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=l(),t()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;var h=n(772),g={};g.styleTagTransform=p(),g.setAttributes=c(),g.insert=r().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=l(),t()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;const f=(e,t)=>{const n=e;let a=[];for(let e=0;e<t;e++)a.push("not hit");return{name:n,status:a,hit:e=>{a[e]="hit"},isSunk:()=>{for(let e=0;e<t;e++)if("not hit"===a[e])return!1;return!0}}};class v{constructor(e){this.board=(()=>{let e=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]];const t=f("destroyer",2),n=f("sub",3),a=f("cruiser",3),s=f("battleship",4),i=f("carrier",5);let r=[t,n,a,s,i],d={};const c=(t,n)=>{const a=t[0],s=t[1];return a+1>9?"y":e[a+1][s]===n||s+1>9?"x":"y"};return{ships:r,grid:e,placeShip:(t,n)=>{d[`${n.name}`]=t[0];for(let a=0;a<t.length;a++){let s=t[a],i=s[0],r=s[1];e[i][r]=n.name}},checkValidShot:(r,o)=>{if("miss"===e[r][o])return!1;if(""===e[r][o])return!0;{const l=e[r][o],u=d[l],p=u[0],A=u[1];let m;switch(m="x"===c(u,l)?r-p:o-A,l){case"destroyer":return"hit"!==t.status[m];case"sub":return"hit"!==n.status[m];case"cruiser":return"hit"!==a.status[m];case"battleship":return"hit"!==s.status[m];default:return"hit"!==i.status[m]}}},receiveAttack:r=>{const o=r[0],l=r[1];if(""!==e[o][l]&&"miss"!==e[o][l]){const r=e[o][l],u=d[r],p=u[0],A=u[1];let m;switch(m="x"===c(u,r)?o-p:l-A,r){case"destroyer":t.hit(m);break;case"sub":n.hit(m);break;case"cruiser":a.hit(m);break;case"battleship":s.hit(m);break;default:i.hit(m)}}else e[o][l]="miss"},isAllSunk:()=>{for(let e=0;e<r.length;e++)if(!r[e].isSunk())return!1;return!0},getContentByCoord:(t,n)=>e[t][n],getShipByName:e=>{for(let t=0;t<r.length;t++)if(r[t].name===e)return r[t]}}})(),this.turn=e}setTurn(e){this.turn=e}getBoard(){return this.board}getTurn(){return this.turn}}class B extends v{constructor(e){super(e)}}class y extends v{constructor(e){super(e)}makeMove(e,t){t.receiveAttack(e)}}const b=document.getElementById("rotate-btn"),C=document.getElementById("reset-btn"),L=(()=>{const e=(e,t)=>`your-square-${e}-${t}`,t=e=>{for(let t=0;t<e.length;t++)if(e[t].classList.contains("your-ship"))return!0;return!1};return C.addEventListener("click",(()=>{M.resetGame()})),b.addEventListener("click",(()=>{"x"===M.getRotationAxis()?M.setRotationAxis("y"):M.setRotationAxis("x")})),{detectSquareClick:e=>{e.addEventListener("click",(()=>{const t=e.id,n=R.getBoardName(t),a=R.getSquareCoords(t,n),s=M.getHumanBoard(),i=M.getAiBoard(),r=a[0],d=a[1];i.checkValidShot(r,d)&&M.checkValidTurn()&&!M.getGameOver()&&!M.stillPlacingHumanShips()&&(i.receiveAttack([r,d]),R.renderBoards(s,i),M.checkGameOver(),M.changeTurn())}))},detectSquareHover:n=>{n.addEventListener("mouseover",(()=>{if((()=>{for(let t=0;t<j;t++)for(let n=0;n<j;n++){const a=e(t,n),s=document.getElementById(a);s.classList.contains("placement-hover")&&s.classList.remove("placement-hover"),s.classList.contains("invalid-placement")&&s.classList.remove("invalid-placement")}})(),M.stillPlacingHumanShips()){const a=M.getCurrentShipPlacement();R.renderStatus(`Place your ${a}!`);const s=n.id,i=R.getBoardName(s),r=R.getSquareCoords(s,i),d=parseInt(r[0]),c=parseInt(r[1]);if("x"===M.getRotationAxis()){if("destroyer"===a){const t=document.getElementById(e(d,c)),n=document.getElementById(e(d+1,c));d<9?(t.classList.add("placement-hover"),n.classList.add("placement-hover")):t.classList.add("invalid-placement")}if("sub"===a){const n=document.getElementById(e(d,c)),a=document.getElementById(e(d+1,c)),s=document.getElementById(e(d+2,c));d<8?t([n,a,s])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===d?n.classList.add("invalid-placement"):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("cruiser"===a){const n=document.getElementById(e(d,c)),a=document.getElementById(e(d+1,c)),s=document.getElementById(e(d+2,c));d<8?t([n,a,s])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===d?n.classList.add("invalid-placement"):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("battleship"===a){const n=document.getElementById(e(d,c)),a=document.getElementById(e(d+1,c)),s=document.getElementById(e(d+2,c)),i=document.getElementById(e(d+3,c));d<7?t([n,a,s,i])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover")):9===d?n.classList.add("invalid-placement"):8===d?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement")):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"))}if("carrier"===a){const n=document.getElementById(e(d,c)),a=document.getElementById(e(d+1,c)),s=document.getElementById(e(d+2,c)),i=document.getElementById(e(d+3,c)),r=document.getElementById(e(d+4,c));d<6?t([n,a,s,i,r])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"),r.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover"),r.classList.add("placement-hover")):9===d?n.classList.add("invalid-placement"):8===d?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement")):7===d?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"))}}else{if("destroyer"===a){const t=document.getElementById(e(d,c)),n=document.getElementById(e(d,c+1));c<9?(t.classList.add("placement-hover"),n.classList.add("placement-hover")):t.classList.add("invalid-placement")}if("sub"===a){const n=document.getElementById(e(d,c)),a=document.getElementById(e(d,c+1)),s=document.getElementById(e(d,c+2));c<8?t([n,a,s])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===c?n.classList.add("invalid-placement"):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("cruiser"===a){const n=document.getElementById(e(d,c)),a=document.getElementById(e(d,c+1)),s=document.getElementById(e(d,c+2));c<8?t([n,a,s])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===c?n.classList.add("invalid-placement"):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("battleship"===a){const n=document.getElementById(e(d,c)),a=document.getElementById(e(d,c+1)),s=document.getElementById(e(d,c+2)),i=document.getElementById(e(d,c+3));c<7?t([n,a,s,i])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover")):9===c?n.classList.add("invalid-placement"):8===c?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement")):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"))}if("carrier"===a){const n=document.getElementById(e(d,c)),a=document.getElementById(e(d,c+1)),s=document.getElementById(e(d,c+2)),i=document.getElementById(e(d,c+3)),r=document.getElementById(e(d,c+4));c<6?t([n,a,s,i,r])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"),r.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover"),r.classList.add("placement-hover")):9===c?n.classList.add("invalid-placement"):8===c?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement")):7===c?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"))}}}else R.hideRotateBtn()}))},detectHumanSquareClick:t=>{t.addEventListener("click",(()=>{if(M.stillPlacingHumanShips()){const t=(()=>{let t=[];for(let n=0;n<j;n++)for(let a=0;a<j;a++){const s=e(n,a);document.getElementById(s).classList.contains("placement-hover")&&t.push([n,a])}return t})(),n=(()=>{for(let t=0;t<j;t++)for(let n=0;n<j;n++){const a=e(t,n);if(document.getElementById(a).classList.contains("invalid-placement"))return!1}return!0})(),a=M.getCurrentShipPlacement(),s=M.getShipByName(a),i=M.getHumanBoard(),r=M.getAiBoard();n&&M.humanPlaceShip(i,t,s),R.renderBoards(i,r)}}))},detectAiSquareHover:e=>{e.addEventListener("mouseover",(()=>{(()=>{for(let e=0;e<j;e++)for(let t=0;t<j;t++){const n=`ai-square-${e}-${t}`,a=document.getElementById(n);a.classList.contains("shot-before")||(a.style.backgroundColor="#FFF")}})(),M.getGameOver()||M.stillPlacingHumanShips()||e.classList.contains("miss")||e.classList.contains("shot-before")||(e.style.cursor="pointer",e.style.backgroundColor="#808080")}))}}})(),I=n.p+"ae34fa137741510dbffd.png",x=document.getElementById("status-message"),k=document.getElementById("your-board"),E=document.getElementById("ai-board-container"),S=document.getElementById("ai-board"),q=document.getElementById("boards"),w=document.getElementById("rotate-btn"),T=document.getElementById("rotate-btn-container"),F=document.getElementById("reset-btn");document.getElementById("icon").href=I;const j=10,R={renderStatus:e=>{x.innerText=e},renderBoards:(e,t)=>{k.innerHTML="",S.innerHTML="";for(let n=0;n<j;n++)for(let a=0;a<j;a++){let s=e.getContentByCoord(a,n),i=t.getContentByCoord(a,n);const r=document.createElement("div");if(r.classList.add("square"),r.id=`your-square-${a}-${n}`,k.appendChild(r),L.detectSquareHover(r),L.detectHumanSquareClick(r),"miss"===s){const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark"),r.classList.add("miss"),r.appendChild(e)}else if(""===s);else if(e.checkValidShot(a,n))r.classList.add("your-ship");else{r.classList.add("shot-before");const t=e.getContentByCoord(a,n);M.checkShipSunk("human",t)&&r.classList.add("ship-sunk");const s=document.createElement("i");s.classList.add("fa-solid"),s.classList.add("fa-xmark"),r.appendChild(s)}const d=document.createElement("div");if(d.classList.add("square"),d.id=`ai-square-${a}-${n}`,S.appendChild(d),L.detectSquareClick(d),L.detectAiSquareHover(d),"miss"===i){const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark"),d.classList.add("miss"),d.appendChild(e)}else if(""===i);else if(!t.checkValidShot(a,n)){d.classList.add("shot-before");const e=t.getContentByCoord(a,n);M.checkShipSunk("ai",e)&&d.classList.add("ship-sunk");const s=document.createElement("i");s.classList.add("fa-solid"),s.classList.add("fa-xmark"),d.appendChild(s)}}},getBoardName:e=>"y"===e[0]?"you":"ai",getSquareCoords:(e,t)=>{let n=[];if("you"===t){const t=e.substring(12,13),a=e.substring(14,15);n.push(t),n.push(a)}else{const t=e.substring(10,11),a=e.substring(12,13);n.push(t),n.push(a)}return n},renderResetBtn:()=>{F.style.display="block"},renderRotateBtn:()=>{w.style.display="block",T.style.display="block"},hideResetBtn:()=>{F.style.display="none"},hideRotateBtn:()=>{w.style.display="none",T.style.display="none"},renderAiBoard:()=>{E.style.display="grid",q.style.gridTemplateColumns="repeat(2, 1fr)"},hideAiBoard:()=>{E.style.display="none",q.style.gridTemplateColumns="1fr"}},H=(e,t)=>Math.floor(Math.random()*(t-e+1)+e),M=(()=>{let e,t,n,a=f("destroyer",2),s=f("sub",3),i=f("cruiser",3),r=f("battleship",4),d=f("carrier",5),c=[a,s,i,r,d];const o=e=>{let t,n;return"destroyer"===e?(t=H(0,8),n=H(0,9),[[t,n],[t+1,n]]):"sub"===e?(t=H(0,7),n=H(0,9),[[t,n],[t+1,n],[t+2,n]]):"cruiser"===e?(t=H(0,6),n=H(0,9),[[t,n],[t+1,n],[t+2,n]]):"battleship"===e?(t=H(0,6),n=H(0,9),[[t,n],[t+1,n],[t+2,n],[t+3,n]]):"carrier"===e?(t=H(0,5),n=H(0,9),[[t,n],[t+1,n],[t+2,n],[t+3,n],[t+4,n]]):void 0},l=e=>{let t,n;return"destroyer"===e?(t=H(0,9),n=H(0,8),[[t,n],[t,n+1]]):"sub"===e?(t=H(0,9),n=H(0,7),[[t,n],[t,n+1],[t,n+2]]):"cruiser"===e?(t=H(0,9),n=H(0,6),[[t,n],[t,n+1],[t,n+2]]):"battleship"===e?(t=H(0,9),n=H(0,6),[[t,n],[t,n+1],[t,n+2],[t,n+3]]):"carrier"===e?(t=H(0,9),n=H(0,5),[[t,n],[t,n+1],[t,n+2],[t,n+3],[t,n+4]]):void 0},u=(e,t)=>{for(let n=0;n<e.length;n++){const a=e[n],s=a[0],i=a[1];t[s][i]=""}},p=(e,t,n)=>{const a=[];for(let s=0;s<t.length;s++){const i=t[s],r=i[0],d=i[1];if(""!==n[r][d])return u(a,n),!1;n[r][d]=e,a.push([r,d])}return!0};let A,m="x",h={destroyer:!1,sub:!1,cruiser:!1,battleship:!1,carrier:!1};const g=()=>{if(e){const e=v();R.renderStatus(`${e}`)}else t.getTurn()?(t.setTurn(!1),n.setTurn(!0),(e=>{let t=!1;const n=b(),a=C();for(;!t;){let n=H(0,9),a=H(0,9);e.checkValidShot(n,a)&&(e.receiveAttack([n,a]),t=!0)}R.renderBoards(n,a),L(),g()})(b())):(t.setTurn(!0),n.setTurn(!1))},v=()=>t.getBoard().isAllSunk()?"AI has won!":"You have won!",b=()=>t.getBoard(),C=()=>n.getBoard(),L=()=>{(t.getBoard().isAllSunk()||n.getBoard().isAllSunk())&&(e=!0,R.renderResetBtn())};return{resetGame:()=>{e=!1,(()=>{for(const e in h)h[e]=!1})(),t=new y(!0),n=new B(!1),t.setTurn(!0),n.setTurn(!1),R.renderStatus("Place your destroyer!"),R.renderRotateBtn(),R.hideResetBtn(),R.hideAiBoard();const a=t.getBoard(),s=n.getBoard();(e=>{let t=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]];for(let n=0;n<c.length;n++){const a=c[n],s=a.name;let i=!1;for(;!i;){let n;n="x"==(0===Math.round(Math.random())?"x":"y")?o(s):l(s),p(s,n,t)&&(e.placeShip(n,a),i=!0)}}})(s),R.renderBoards(a,s)},changeTurn:g,checkValidTurn:()=>t.getTurn(),getHumanBoard:b,getAiBoard:C,checkGameOver:L,getGameOver:()=>e,checkShipSunk:(e,t)=>{const n=b(),a=C();return"human"===e?n.getShipByName(t).isSunk():a.getShipByName(t).isSunk()},stillPlacingHumanShips:()=>{for(const e in h)if(!h[e])return!0;return L()||R.renderStatus("It's your turn to attack!"),R.renderAiBoard(),!1},setRotationAxis:e=>{m=e},getRotationAxis:()=>m,getCurrentShipPlacement:()=>{for(const e in h)if(!h[e])return A=e,A},getShipByName:e=>{switch(e){case"destroyer":return a;case"sub":return s;case"cruiser":return i;case"battleship":return r;default:return d}},humanPlaceShip:(e,t,n)=>{e.placeShip(t,n),h[n.name]=!0}}})();M.resetGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,