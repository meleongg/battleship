(()=>{"use strict";var e={434:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(537),s=n.n(a),i=n(645),r=n.n(i)()(s());r.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA;IACI,sBAAsB;AAC1B",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}"],sourceRoot:""}]);const c=r},772:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(537),s=n.n(a),i=n(645),r=n.n(i)()(s());r.push([e.id,"body {\n    font-family: 'Oxygen', sans-serif;\n    background-color: #003B73;\n    display: grid;\n    row-gap: 40px;\n    justify-content: center;\n    align-content: center;\n    color: #FFF;\n}\n\nheader {\n    padding-top: 40px;\n}\n\nnav {\n    text-align: center;\n}\n\n#title {\n    font-size: 40px;\n    font-weight: 700;\n}\n\n#status-message {\n    font-size: 25px;\n    text-align: center;\n}\n\n#boards {\n    width: 90vw;\n    /* height: 600px; */\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n#your-board, #ai-board {\n    width: 400px;\n    height: 400px;\n    background-color: #333;\n    row-gap: 1px;\n    column-gap: 1px;\n    border: #333 solid 10px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n.board-container {\n    display: flex;\n    flex-direction: column;\n    justify-items: center;\n    align-items: center;\n}\n\n.waters-title {\n    padding: 20px 0 20px 0;\n}\n\n#rotate-btn-container {\n    padding: 20px 0 20px 0;\n}\n\n#rotate-btn, #reset-btn {\n    font-size: 14px;\n    padding: 5px 10px;\n}\n\n#reset-game {\n    display: flex;\n    justify-content: center;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n.square {\n    background-color: #FFF;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #333;\n}\n\n.square > * {\n    font-size: 35px;\n}\n\n.shot-before {\n    background-color: #808080;\n}\n\n.ship-sunk {\n    background-color: #DC143C;\n}\n\n.your-ship {\n    background-color: #808080;\n}\n\n.placement-hover {\n    background-color: #00FF00;\n}\n\n.placement-hover:hover {\n    cursor: pointer;\n}\n\n.invalid-placement {\n    background-color: #DC143C;\n}","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,yBAAyB;IACzB,aAAa;IACb,aAAa;IACb,uBAAuB;IACvB,qBAAqB;IACrB,WAAW;AACf;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,aAAa;IACb,qCAAqC;IACrC,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,uBAAuB;IACvB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,qBAAqB;IACrB,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:["body {\n    font-family: 'Oxygen', sans-serif;\n    background-color: #003B73;\n    display: grid;\n    row-gap: 40px;\n    justify-content: center;\n    align-content: center;\n    color: #FFF;\n}\n\nheader {\n    padding-top: 40px;\n}\n\nnav {\n    text-align: center;\n}\n\n#title {\n    font-size: 40px;\n    font-weight: 700;\n}\n\n#status-message {\n    font-size: 25px;\n    text-align: center;\n}\n\n#boards {\n    width: 90vw;\n    /* height: 600px; */\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n#your-board, #ai-board {\n    width: 400px;\n    height: 400px;\n    background-color: #333;\n    row-gap: 1px;\n    column-gap: 1px;\n    border: #333 solid 10px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n.board-container {\n    display: flex;\n    flex-direction: column;\n    justify-items: center;\n    align-items: center;\n}\n\n.waters-title {\n    padding: 20px 0 20px 0;\n}\n\n#rotate-btn-container {\n    padding: 20px 0 20px 0;\n}\n\n#rotate-btn, #reset-btn {\n    font-size: 14px;\n    padding: 5px 10px;\n}\n\n#reset-game {\n    display: flex;\n    justify-content: center;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n.square {\n    background-color: #FFF;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #333;\n}\n\n.square > * {\n    font-size: 35px;\n}\n\n.shot-before {\n    background-color: #808080;\n}\n\n.ship-sunk {\n    background-color: #DC143C;\n}\n\n.your-ship {\n    background-color: #808080;\n}\n\n.placement-hover {\n    background-color: #00FF00;\n}\n\n.placement-hover:hover {\n    cursor: pointer;\n}\n\n.invalid-placement {\n    background-color: #DC143C;\n}"],sourceRoot:""}]);const c=r},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,s,i){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(a)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(r[d]=!0)}for(var l=0;l<e.length;l++){var o=[].concat(e[l]);a&&r[o[0]]||(void 0!==i&&(void 0===o[5]||(o[1]="@layer".concat(o[5].length>0?" ".concat(o[5]):""," {").concat(o[1],"}")),o[5]=i),n&&(o[2]?(o[1]="@media ".concat(o[2]," {").concat(o[1],"}"),o[2]=n):o[2]=n),s&&(o[4]?(o[1]="@supports (".concat(o[4],") {").concat(o[1],"}"),o[4]=s):o[4]="".concat(s)),t.push(o))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(s," */"),r=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(r).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var i={},r=[],c=0;c<e.length;c++){var d=e[c],l=a.base?d[0]+a.base:d[0],o=i[l]||0,u="".concat(l," ").concat(o);i[l]=o+1;var p=n(u),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var A=s(m,a);a.byIndex=c,t.splice(c,0,{identifier:u,updater:A,references:1})}r.push(u)}return r}function s(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,s){var i=a(e=e||[],s=s||{});return function(e){e=e||[];for(var r=0;r<i.length;r++){var c=n(i[r]);t[c].references--}for(var d=a(e,s),l=0;l<i.length;l++){var o=n(i[l]);0===t[o].references&&(t[o].updater(),t.splice(o,1))}i=d}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var s=void 0!==n.layer;s&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,s&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(a){var s=t[a];if(void 0!==s)return s.exports;var i=t[a]={id:a,exports:{}};return e[a](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{var e=n(379),t=n.n(e),a=n(795),s=n.n(a),i=n(569),r=n.n(i),c=n(565),d=n.n(c),l=n(216),o=n.n(l),u=n(589),p=n.n(u),m=n(434),A={};A.styleTagTransform=p(),A.setAttributes=d(),A.insert=r().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=o(),t()(m.Z,A),m.Z&&m.Z.locals&&m.Z.locals;var h=n(772),g={};g.styleTagTransform=p(),g.setAttributes=d(),g.insert=r().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=o(),t()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;const f=(e,t)=>{const n=e;let a=[];for(let e=0;e<t;e++)a.push("not hit");return{name:n,status:a,hit:e=>{a[e]="hit"},isSunk:()=>{for(let e=0;e<t;e++)if("not hit"===a[e])return!1;return!0}}};class v{constructor(e){this.board=(()=>{let e=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]];const t=f("destroyer",2),n=f("sub",3),a=f("cruiser",3),s=f("battleship",4),i=f("carrier",5);let r=[t,n,a,s,i],c={};const d=(t,n)=>{const a=t[0],s=t[1];return a+1>9?"y":e[a+1][s]===n||s+1>9?"x":"y"};return{ships:r,grid:e,placeShip:(t,n)=>{c[`${n.name}`]=t[0];for(let a=0;a<t.length;a++){let s=t[a],i=s[0],r=s[1];e[i][r]=n.name}},checkValidShot:(r,l)=>{if("miss"===e[r][l])return!1;if(""===e[r][l])return!0;{const o=e[r][l],u=c[o],p=u[0],m=u[1];let A;switch(A="x"===d(u,o)?r-p:l-m,o){case"destroyer":return"hit"!==t.status[A];case"sub":return"hit"!==n.status[A];case"cruiser":return"hit"!==a.status[A];case"battleship":return"hit"!==s.status[A];default:return"hit"!==i.status[A]}}},receiveAttack:r=>{const l=r[0],o=r[1];if(""!==e[l][o]&&"miss"!==e[l][o]){const r=e[l][o],u=c[r],p=u[0],m=u[1];let A;switch(A="x"===d(u,r)?l-p:o-m,r){case"destroyer":t.hit(A);break;case"sub":n.hit(A);break;case"cruiser":a.hit(A);break;case"battleship":s.hit(A);break;default:i.hit(A)}}else e[l][o]="miss"},isAllSunk:()=>{for(let e=0;e<r.length;e++)if(!r[e].isSunk())return!1;return!0},getContentByCoord:(t,n)=>e[t][n],getShipByName:e=>{for(let t=0;t<r.length;t++)if(r[t].name===e)return r[t]}}})(),this.turn=e}setTurn(e){this.turn=e}getBoard(){return this.board}getTurn(){return this.turn}}class y extends v{constructor(e){super(e)}}class B extends v{constructor(e){super(e)}makeMove(e,t){t.receiveAttack(e)}}const b=document.getElementById("rotate-btn"),C=document.getElementById("reset-btn"),L=(()=>{const e=(e,t)=>`your-square-${e}-${t}`,t=e=>{for(let t=0;t<e.length;t++)if(e[t].classList.contains("your-ship"))return!0;return!1};return C.addEventListener("click",(()=>{F.resetGame()})),b.addEventListener("click",(()=>{"x"===F.getRotationAxis()?F.setRotationAxis("y"):F.setRotationAxis("x")})),{detectSquareClick:e=>{e.addEventListener("click",(()=>{const t=e.id,n=T.getBoardName(t),a=T.getSquareCoords(t,n),s=F.getHumanBoard(),i=F.getAiBoard(),r=a[0],c=a[1];i.checkValidShot(r,c)&&F.checkValidTurn()&&!F.getGameOver()&&!F.stillPlacingHumanShips()&&(i.receiveAttack([r,c]),T.renderBoards(s,i),F.checkGameOver(),F.changeTurn())}))},detectSquareHover:n=>{n.addEventListener("mouseover",(()=>{if((()=>{for(let t=0;t<w;t++)for(let n=0;n<w;n++){const a=e(t,n),s=document.getElementById(a);s.classList.contains("placement-hover")&&s.classList.remove("placement-hover"),s.classList.contains("invalid-placement")&&s.classList.remove("invalid-placement")}})(),F.stillPlacingHumanShips()){const a=F.getCurrentShipPlacement();T.renderStatus(`Place your ${a}!`);const s=n.id,i=T.getBoardName(s),r=T.getSquareCoords(s,i),c=parseInt(r[0]),d=parseInt(r[1]);if("x"===F.getRotationAxis()){if("destroyer"===a){const t=document.getElementById(e(c,d)),n=document.getElementById(e(c+1,d));c<9?(t.classList.add("placement-hover"),n.classList.add("placement-hover")):t.classList.add("invalid-placement")}if("sub"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c+1,d)),s=document.getElementById(e(c+2,d));c<8?t([n,a,s])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===c?n.classList.add("invalid-placement"):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("cruiser"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c+1,d)),s=document.getElementById(e(c+2,d));c<8?t([n,a,s])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===c?n.classList.add("invalid-placement"):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("battleship"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c+1,d)),s=document.getElementById(e(c+2,d)),i=document.getElementById(e(c+3,d));c<7?t([n,a,s,i])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover")):9===c?n.classList.add("invalid-placement"):8===c?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement")):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"))}if("carrier"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c+1,d)),s=document.getElementById(e(c+2,d)),i=document.getElementById(e(c+3,d)),r=document.getElementById(e(c+4,d));c<6?t([n,a,s,i,r])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"),r.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover"),r.classList.add("placement-hover")):9===c?n.classList.add("invalid-placement"):8===c?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement")):7===c?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"))}}else{if("destroyer"===a){const t=document.getElementById(e(c,d)),n=document.getElementById(e(c,d+1));d<9?(t.classList.add("placement-hover"),n.classList.add("placement-hover")):t.classList.add("invalid-placement")}if("sub"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c,d+1)),s=document.getElementById(e(c,d+2));d<8?t([n,a,s])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===d?n.classList.add("invalid-placement"):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("cruiser"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c,d+1)),s=document.getElementById(e(c,d+2));d<8?t([n,a,s])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===d?n.classList.add("invalid-placement"):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("battleship"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c,d+1)),s=document.getElementById(e(c,d+2)),i=document.getElementById(e(c,d+3));d<7?t([n,a,s,i])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover")):9===d?n.classList.add("invalid-placement"):8===d?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement")):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"))}if("carrier"===a){const n=document.getElementById(e(c,d)),a=document.getElementById(e(c,d+1)),s=document.getElementById(e(c,d+2)),i=document.getElementById(e(c,d+3)),r=document.getElementById(e(c,d+4));d<6?t([n,a,s,i,r])?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"),r.classList.add("invalid-placement")):(n.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover"),r.classList.add("placement-hover")):9===d?n.classList.add("invalid-placement"):8===d?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement")):7===d?(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(n.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"))}}}else b.style.display="none"}))},detectHumanSquareClick:t=>{t.addEventListener("click",(()=>{if(F.stillPlacingHumanShips()){const t=(()=>{let t=[];for(let n=0;n<w;n++)for(let a=0;a<w;a++){const s=e(n,a);document.getElementById(s).classList.contains("placement-hover")&&t.push([n,a])}return t})(),n=(()=>{for(let t=0;t<w;t++)for(let n=0;n<w;n++){const a=e(t,n);if(document.getElementById(a).classList.contains("invalid-placement"))return!1}return!0})(),a=F.getCurrentShipPlacement(),s=F.getShipByName(a),i=F.getHumanBoard(),r=F.getAiBoard();n&&F.humanPlaceShip(i,t,s),T.renderBoards(i,r)}}))},detectAiSquareHover:e=>{e.addEventListener("mouseover",(()=>{(()=>{for(let e=0;e<w;e++)for(let t=0;t<w;t++){const n=`ai-square-${e}-${t}`,a=document.getElementById(n);a.classList.contains("shot-before")||(a.style.backgroundColor="#FFF")}})(),F.getGameOver()||F.stillPlacingHumanShips()||e.classList.contains("miss")||e.classList.contains("shot-before")||(e.style.cursor="pointer",e.style.backgroundColor="#808080")}))}}})(),I=n.p+"ae34fa137741510dbffd.png",k=document.getElementById("status-message"),x=document.getElementById("your-board"),E=document.getElementById("ai-board"),S=document.getElementById("rotate-btn"),q=document.getElementById("reset-btn");document.getElementById("icon").href=I;const w=10,T={renderStatus:e=>{k.innerText=e},renderBoards:(e,t)=>{x.innerHTML="",E.innerHTML="";for(let n=0;n<w;n++)for(let a=0;a<w;a++){let s=e.getContentByCoord(a,n),i=t.getContentByCoord(a,n);const r=document.createElement("div");if(r.classList.add("square"),r.id=`your-square-${a}-${n}`,x.appendChild(r),L.detectSquareHover(r),L.detectHumanSquareClick(r),"miss"===s){const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark"),r.classList.add("miss"),r.appendChild(e)}else if(""===s);else if(e.checkValidShot(a,n))r.classList.add("your-ship");else{r.classList.add("shot-before");const t=e.getContentByCoord(a,n);F.checkShipSunk("human",t)&&r.classList.add("ship-sunk");const s=document.createElement("i");s.classList.add("fa-solid"),s.classList.add("fa-xmark"),r.appendChild(s)}const c=document.createElement("div");if(c.classList.add("square"),c.id=`ai-square-${a}-${n}`,E.appendChild(c),L.detectSquareClick(c),L.detectAiSquareHover(c),"miss"===i){const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark"),c.classList.add("miss"),c.appendChild(e)}else if(""===i);else if(!t.checkValidShot(a,n)){c.classList.add("shot-before");const e=t.getContentByCoord(a,n);F.checkShipSunk("ai",e)&&c.classList.add("ship-sunk");const s=document.createElement("i");s.classList.add("fa-solid"),s.classList.add("fa-xmark"),c.appendChild(s)}}},getBoardName:e=>"y"===e[0]?"you":"ai",getSquareCoords:(e,t)=>{let n=[];if("you"===t){const t=e.substring(12,13),a=e.substring(14,15);n.push(t),n.push(a)}else{const t=e.substring(10,11),a=e.substring(12,13);n.push(t),n.push(a)}return n},renderResetBtn:()=>{q.style.display="block"},renderRotateBtn:()=>{S.style.display="block"},hideResetBtn:()=>{q.style.display="none"}},j=(e,t)=>Math.floor(Math.random()*(t-e+1)+e),F=(()=>{let e,t,n,a=f("destroyer",2),s=f("sub",3),i=f("cruiser",3),r=f("battleship",4),c=f("carrier",5),d=[a,s,i,r,c];const l=e=>{let t,n;return"destroyer"===e?(t=j(0,8),n=j(0,9),[[t,n],[t+1,n]]):"sub"===e?(t=j(0,7),n=j(0,9),[[t,n],[t+1,n],[t+2,n]]):"cruiser"===e?(t=j(0,6),n=j(0,9),[[t,n],[t+1,n],[t+2,n]]):"battleship"===e?(t=j(0,6),n=j(0,9),[[t,n],[t+1,n],[t+2,n],[t+3,n]]):"carrier"===e?(t=j(0,5),n=j(0,9),[[t,n],[t+1,n],[t+2,n],[t+3,n],[t+4,n]]):void 0},o=e=>{let t,n;return"destroyer"===e?(t=j(0,9),n=j(0,8),[[t,n],[t,n+1]]):"sub"===e?(t=j(0,9),n=j(0,7),[[t,n],[t,n+1],[t,n+2]]):"cruiser"===e?(t=j(0,9),n=j(0,6),[[t,n],[t,n+1],[t,n+2]]):"battleship"===e?(t=j(0,9),n=j(0,6),[[t,n],[t,n+1],[t,n+2],[t,n+3]]):"carrier"===e?(t=j(0,9),n=j(0,5),[[t,n],[t,n+1],[t,n+2],[t,n+3],[t,n+4]]):void 0},u=(e,t)=>{for(let n=0;n<e.length;n++){const a=e[n],s=a[0],i=a[1];t[s][i]=""}},p=(e,t,n)=>{const a=[];for(let s=0;s<t.length;s++){const i=t[s],r=i[0],c=i[1];if(""!==n[r][c])return u(a,n),!1;n[r][c]=e,a.push([r,c])}return!0};let m,A="x",h={destroyer:!1,sub:!1,cruiser:!1,battleship:!1,carrier:!1};const g=()=>{if(e){const e=v();T.renderStatus(`${e}`)}else t.getTurn()?(t.setTurn(!1),n.setTurn(!0),(e=>{let t=!1;const n=b(),a=C();for(;!t;){let n=j(0,9),a=j(0,9);e.checkValidShot(n,a)&&(e.receiveAttack([n,a]),t=!0)}T.renderBoards(n,a),L(),g()})(b())):(t.setTurn(!0),n.setTurn(!1))},v=()=>t.getBoard().isAllSunk()?"AI has won!":"You have won!",b=()=>t.getBoard(),C=()=>n.getBoard(),L=()=>{(t.getBoard().isAllSunk()||n.getBoard().isAllSunk())&&(e=!0,T.renderResetBtn())};return{resetGame:()=>{e=!1,(()=>{for(const e in h)h[e]=!1})(),t=new B(!0),n=new y(!1),t.setTurn(!0),n.setTurn(!1),T.renderStatus("Place your destroyer!"),T.renderRotateBtn(),T.hideResetBtn();const a=t.getBoard(),s=n.getBoard();(e=>{let t=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]];for(let n=0;n<d.length;n++){const a=d[n],s=a.name;let i=!1;for(;!i;){let n;n="x"==(0===Math.round(Math.random())?"x":"y")?l(s):o(s),p(s,n,t)&&(e.placeShip(n,a),i=!0)}}})(s),T.renderBoards(a,s)},changeTurn:g,checkValidTurn:()=>t.getTurn(),getHumanBoard:b,getAiBoard:C,checkGameOver:L,getGameOver:()=>e,checkShipSunk:(e,t)=>{const n=b(),a=C();return"human"===e?n.getShipByName(t).isSunk():a.getShipByName(t).isSunk()},stillPlacingHumanShips:()=>{for(const e in h)if(!h[e])return!0;return L()||T.renderStatus("It's your turn to attack!"),!1},setRotationAxis:e=>{A=e},getRotationAxis:()=>A,getCurrentShipPlacement:()=>{for(const e in h)if(!h[e])return m=e,m},getShipByName:e=>{switch(e){case"destroyer":return a;case"sub":return s;case"cruiser":return i;case"battleship":return r;default:return c}},humanPlaceShip:(e,t,n)=>{e.placeShip(t,n),h[n.name]=!0}}})();F.resetGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RyxLQUMvQjNILEVBQU1jLFVBQVVDLEVBQVFKLEdBQ3hCOEgsR0FBa0IsTUE0RjlCRSxDQUFhbEYsR0FFYkwsRUFBa0JVLGFBQWFQLEVBQVlFLElBOEQzQk8sV0FBQUEsRUFBWUwsZUFwQ1QsSUFDWnlELEVBQVl2RixVQW1DeUIyQixjQUFBQSxFQUFlRSxXQUFBQSxFQUFZSyxjQUFBQSxFQUFlSCxZQWpCdEUsSUFDVHVELEVBaUJQWixjQWRrQixDQUFDcUMsRUFBUXBKLEtBQzNCLE1BQU0rRCxFQUFhQyxJQUNiQyxFQUFVQyxJQUVoQixNQUFlLFVBQVhrRixFQUNhckYsRUFBVy9CLGNBQWNoQyxHQUMxQkksU0FFQzZELEVBQVFqQyxjQUFjaEMsR0FDdkJJLFVBS0RpRSx1QkE3SVksS0FDM0IsSUFBSyxNQUFNckUsS0FBWXlJLEVBQ25CLElBQUtBLEVBQXNCekksR0FDdkIsT0FBTyxFQVFmLE9BSkt1RSxLQUNEWCxFQUFrQmtCLGFBQWEsOEJBRzVCLEdBa0lnQ3ZCLGdCQXJKbEJwQixJQUNyQnFHLEVBQWVyRyxHQW9KeUNtQixnQkFqSnBDLElBQ2JrRixFQWdKa0UzRCx3QkFySDdDLEtBQzVCLElBQUssTUFBTTdFLEtBQVl5SSxFQUNuQixJQUFLQSxFQUFzQnpJLEdBRXZCLE9BREF1SSxFQUF1QnZJLEVBQ2hCdUksR0FrSGZ2RyxjQWhVbUJoQyxJQUNuQixPQUFRQSxHQUNKLElBQUssWUFDRCxPQUFPVSxFQUNYLElBQUssTUFDRCxPQUFPQyxFQUNYLElBQUssVUFDRCxPQUFPQyxFQUNYLElBQUssYUFDRCxPQUFPQyxFQUNYLFFBQ0ksT0FBT0MsSUFxVEFpRixlQTdHSSxDQUFDdkYsRUFBT2UsRUFBUUosS0FDbkNYLEVBQU1jLFVBQVVDLEVBQVFKLEdBQ3hCc0gsRUFBc0J0SCxFQUFLbEIsT0FBUSxLQWxPbkIsR0NYeEJtRCxFQUFnQkMsYSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL3Jlc2V0LmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9zdHlsZXMuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvcmVzZXQuY3NzPzRjZmIiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvc3R5bGVzLmNzcz9lNDViIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbG9naWMvc2hpcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2xvZ2ljL3BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2xvZ2ljL2dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2xvZ2ljL2FpLnBsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2xvZ2ljL2h1bWFuLnBsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2RvbS9kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9kb20vZGlzcGxheS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2RvbS9kb20ubG9naWMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi8qIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90b29scy9jc3MvcmVzZXQvIFxcbiAgIHYyLjAgfCAyMDExMDEyNlxcbiAgIExpY2Vuc2U6IG5vbmUgKHB1YmxpYyBkb21haW4pXFxuKi9cXG5cXG5odG1sLCBib2R5LCBkaXYsIHNwYW4sIGFwcGxldCwgb2JqZWN0LCBpZnJhbWUsXFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXFxuc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcXG5iLCB1LCBpLCBjZW50ZXIsXFxuZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSxcXG5maWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcXG5hcnRpY2xlLCBhc2lkZSwgY2FudmFzLCBkZXRhaWxzLCBlbWJlZCwgXFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCBcXG5tZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xcblxcdG1hcmdpbjogMDtcXG5cXHRwYWRkaW5nOiAwO1xcblxcdGJvcmRlcjogMDtcXG5cXHRmb250LXNpemU6IDEwMCU7XFxuXFx0Zm9udDogaW5oZXJpdDtcXG5cXHR2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLCBcXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xcblxcdGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5ib2R5IHtcXG5cXHRsaW5lLWhlaWdodDogMTtcXG59XFxub2wsIHVsIHtcXG5cXHRsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5ibG9ja3F1b3RlLCBxIHtcXG5cXHRxdW90ZXM6IG5vbmU7XFxufVxcbmJsb2NrcXVvdGU6YmVmb3JlLCBibG9ja3F1b3RlOmFmdGVyLFxcbnE6YmVmb3JlLCBxOmFmdGVyIHtcXG5cXHRjb250ZW50OiAnJztcXG5cXHRjb250ZW50OiBub25lO1xcbn1cXG50YWJsZSB7XFxuXFx0Ym9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG5cXHRib3JkZXItc3BhY2luZzogMDtcXG59XFxuXFxuKiB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvcmVzZXQuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOzs7Q0FHQzs7QUFFRDs7Ozs7Ozs7Ozs7OztDQWFDLFNBQVM7Q0FDVCxVQUFVO0NBQ1YsU0FBUztDQUNULGVBQWU7Q0FDZixhQUFhO0NBQ2Isd0JBQXdCO0FBQ3pCO0FBQ0EsZ0RBQWdEO0FBQ2hEOztDQUVDLGNBQWM7QUFDZjtBQUNBO0NBQ0MsY0FBYztBQUNmO0FBQ0E7Q0FDQyxnQkFBZ0I7QUFDakI7QUFDQTtDQUNDLFlBQVk7QUFDYjtBQUNBOztDQUVDLFdBQVc7Q0FDWCxhQUFhO0FBQ2Q7QUFDQTtDQUNDLHlCQUF5QjtDQUN6QixpQkFBaUI7QUFDbEI7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC8gXFxuICAgdjIuMCB8IDIwMTEwMTI2XFxuICAgTGljZW5zZTogbm9uZSAocHVibGljIGRvbWFpbilcXG4qL1xcblxcbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxcbmIsIHUsIGksIGNlbnRlcixcXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBcXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIFxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XFxuXFx0bWFyZ2luOiAwO1xcblxcdHBhZGRpbmc6IDA7XFxuXFx0Ym9yZGVyOiAwO1xcblxcdGZvbnQtc2l6ZTogMTAwJTtcXG5cXHRmb250OiBpbmhlcml0O1xcblxcdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xcbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsIFxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XFxuXFx0ZGlzcGxheTogYmxvY2s7XFxufVxcbmJvZHkge1xcblxcdGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG5vbCwgdWwge1xcblxcdGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcbmJsb2NrcXVvdGUsIHEge1xcblxcdHF1b3Rlczogbm9uZTtcXG59XFxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xcblxcdGNvbnRlbnQ6ICcnO1xcblxcdGNvbnRlbnQ6IG5vbmU7XFxufVxcbnRhYmxlIHtcXG5cXHRib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcblxcdGJvcmRlci1zcGFjaW5nOiAwO1xcbn1cXG5cXG4qIHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICAgIGZvbnQtZmFtaWx5OiAnT3h5Z2VuJywgc2Fucy1zZXJpZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwM0I3MztcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgcm93LWdhcDogNDBweDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgY29sb3I6ICNGRkY7XFxufVxcblxcbmhlYWRlciB7XFxuICAgIHBhZGRpbmctdG9wOiA0MHB4O1xcbn1cXG5cXG5uYXYge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbiN0aXRsZSB7XFxuICAgIGZvbnQtc2l6ZTogNDBweDtcXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcXG59XFxuXFxuI3N0YXR1cy1tZXNzYWdlIHtcXG4gICAgZm9udC1zaXplOiAyNXB4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbiNib2FyZHMge1xcbiAgICB3aWR0aDogOTB2dztcXG4gICAgLyogaGVpZ2h0OiA2MDBweDsgKi9cXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMiwgMWZyKTtcXG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbiN5b3VyLWJvYXJkLCAjYWktYm9hcmQge1xcbiAgICB3aWR0aDogNDAwcHg7XFxuICAgIGhlaWdodDogNDAwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzM7XFxuICAgIHJvdy1nYXA6IDFweDtcXG4gICAgY29sdW1uLWdhcDogMXB4O1xcbiAgICBib3JkZXI6ICMzMzMgc29saWQgMTBweDtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDFmcik7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCAxZnIpO1xcbiAgICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuXFxuLmJvYXJkLWNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLndhdGVycy10aXRsZSB7XFxuICAgIHBhZGRpbmc6IDIwcHggMCAyMHB4IDA7XFxufVxcblxcbiNyb3RhdGUtYnRuLWNvbnRhaW5lciB7XFxuICAgIHBhZGRpbmc6IDIwcHggMCAyMHB4IDA7XFxufVxcblxcbiNyb3RhdGUtYnRuLCAjcmVzZXQtYnRuIHtcXG4gICAgZm9udC1zaXplOiAxNHB4O1xcbiAgICBwYWRkaW5nOiA1cHggMTBweDtcXG59XFxuXFxuI3Jlc2V0LWdhbWUge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuXFxuYnV0dG9uOmhvdmVyIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uc3F1YXJlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRjtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGNvbG9yOiAjMzMzO1xcbn1cXG5cXG4uc3F1YXJlID4gKiB7XFxuICAgIGZvbnQtc2l6ZTogMzVweDtcXG59XFxuXFxuLnNob3QtYmVmb3JlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzgwODA4MDtcXG59XFxuXFxuLnNoaXAtc3VuayB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNEQzE0M0M7XFxufVxcblxcbi55b3VyLXNoaXAge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjODA4MDgwO1xcbn1cXG5cXG4ucGxhY2VtZW50LWhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwRkYwMDtcXG59XFxuXFxuLnBsYWNlbWVudC1ob3Zlcjpob3ZlciB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmludmFsaWQtcGxhY2VtZW50IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0RDMTQzQztcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9zdHlsZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksaUNBQWlDO0lBQ2pDLHlCQUF5QjtJQUN6QixhQUFhO0lBQ2IsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixxQkFBcUI7SUFDckIsV0FBVztBQUNmOztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGVBQWU7SUFDZixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixxQ0FBcUM7SUFDckMscUJBQXFCO0lBQ3JCLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLFlBQVk7SUFDWixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLFlBQVk7SUFDWixlQUFlO0lBQ2YsdUJBQXVCO0lBQ3ZCLGFBQWE7SUFDYixzQ0FBc0M7SUFDdEMsbUNBQW1DO0lBQ25DLHFCQUFxQjtJQUNyQixxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLHFCQUFxQjtJQUNyQixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsWUFBWTtJQUNaLFdBQVc7SUFDWCxhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtJQUNuQixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJib2R5IHtcXG4gICAgZm9udC1mYW1pbHk6ICdPeHlnZW4nLCBzYW5zLXNlcmlmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAzQjczO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICByb3ctZ2FwOiA0MHB4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcbiAgICBjb2xvcjogI0ZGRjtcXG59XFxuXFxuaGVhZGVyIHtcXG4gICAgcGFkZGluZy10b3A6IDQwcHg7XFxufVxcblxcbm5hdiB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuI3RpdGxlIHtcXG4gICAgZm9udC1zaXplOiA0MHB4O1xcbiAgICBmb250LXdlaWdodDogNzAwO1xcbn1cXG5cXG4jc3RhdHVzLW1lc3NhZ2Uge1xcbiAgICBmb250LXNpemU6IDI1cHg7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuI2JvYXJkcyB7XFxuICAgIHdpZHRoOiA5MHZ3O1xcbiAgICAvKiBoZWlnaHQ6IDYwMHB4OyAqL1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLCAxZnIpO1xcbiAgICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuXFxuI3lvdXItYm9hcmQsICNhaS1ib2FyZCB7XFxuICAgIHdpZHRoOiA0MDBweDtcXG4gICAgaGVpZ2h0OiA0MDBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMzMztcXG4gICAgcm93LWdhcDogMXB4O1xcbiAgICBjb2x1bW4tZ2FwOiAxcHg7XFxuICAgIGJvcmRlcjogIzMzMyBzb2xpZCAxMHB4O1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMCwgMWZyKTtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTAsIDFmcik7XFxuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcbn1cXG5cXG4uYm9hcmQtY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ud2F0ZXJzLXRpdGxlIHtcXG4gICAgcGFkZGluZzogMjBweCAwIDIwcHggMDtcXG59XFxuXFxuI3JvdGF0ZS1idG4tY29udGFpbmVyIHtcXG4gICAgcGFkZGluZzogMjBweCAwIDIwcHggMDtcXG59XFxuXFxuI3JvdGF0ZS1idG4sICNyZXNldC1idG4ge1xcbiAgICBmb250LXNpemU6IDE0cHg7XFxuICAgIHBhZGRpbmc6IDVweCAxMHB4O1xcbn1cXG5cXG4jcmVzZXQtZ2FtZSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG5idXR0b246aG92ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5zcXVhcmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgY29sb3I6ICMzMzM7XFxufVxcblxcbi5zcXVhcmUgPiAqIHtcXG4gICAgZm9udC1zaXplOiAzNXB4O1xcbn1cXG5cXG4uc2hvdC1iZWZvcmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjODA4MDgwO1xcbn1cXG5cXG4uc2hpcC1zdW5rIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0RDMTQzQztcXG59XFxuXFxuLnlvdXItc2hpcCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM4MDgwODA7XFxufVxcblxcbi5wbGFjZW1lbnQtaG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBGRjAwO1xcbn1cXG5cXG4ucGxhY2VtZW50LWhvdmVyOmhvdmVyIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uaW52YWxpZC1wbGFjZW1lbnQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjREMxNDNDO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Jlc2V0LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmVzZXQuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJjb25zdCBzaGlwRmFjdG9yeSA9IChzaGlwTmFtZSwgbGVuZ3RoKSA9PiB7XG4gICAgY29uc3QgbmFtZSA9IHNoaXBOYW1lOyBcbiAgICBsZXQgc3RhdHVzID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN0YXR1cy5wdXNoKFwibm90IGhpdFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBoaXQgPSAoaW5kZXgpID0+IHtcbiAgICAgICAgc3RhdHVzW2luZGV4XSA9IFwiaGl0XCI7XG4gICAgfVxuXG4gICAgY29uc3QgaXNTdW5rID0gKCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzW2ldID09PSBcIm5vdCBoaXRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlOyBcbiAgICB9XG5cbiAgICByZXR1cm4geyBuYW1lLCBzdGF0dXMsIGhpdCwgaXNTdW5rIH07XG59XG5cbmV4cG9ydCB7IHNoaXBGYWN0b3J5IH0iLCJpbXBvcnQgeyBnYW1lYm9hcmRGYWN0b3J5IH0gZnJvbSBcIi4vZ2FtZWJvYXJkXCI7XG5cbmNsYXNzIFBsYXllciB7XG4gICAgY29uc3RydWN0b3IodHVybikge1xuICAgICAgICB0aGlzLmJvYXJkID0gZ2FtZWJvYXJkRmFjdG9yeSgpO1xuICAgICAgICB0aGlzLnR1cm4gPSB0dXJuOyBcbiAgICB9XG5cbiAgICBzZXRUdXJuKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudHVybiA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldEJvYXJkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ib2FyZDsgXG4gICAgfVxuXG4gICAgZ2V0VHVybigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHVybjtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFBsYXllciB9IiwiaW1wb3J0IHsgc2hpcEZhY3RvcnkgfSBmcm9tIFwiLi9zaGlwXCI7XG5cbmNvbnN0IGdhbWVib2FyZEZhY3RvcnkgPSAoKSA9PiB7XG4gICAgbGV0IGdyaWQgPSBbW1wiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCJdLFxuICAgICAgICAgICAgICAgIFtcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiXSxcbiAgICAgICAgICAgICAgICBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICAgICAgW1wiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCJdLFxuICAgICAgICAgICAgICAgIFtcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiXSxcbiAgICAgICAgICAgICAgICBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICAgICAgW1wiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCJdLFxuICAgICAgICAgICAgICAgIFtcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiXSxcbiAgICAgICAgICAgICAgICBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICAgICAgW1wiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCJdXTtcbiAgICBcbiAgICBjb25zdCBkZXN0cm95ZXIgPSBzaGlwRmFjdG9yeShcImRlc3Ryb3llclwiLCAyKTtcbiAgICBjb25zdCBzdWIgPSBzaGlwRmFjdG9yeShcInN1YlwiLCAzKTtcbiAgICBjb25zdCBjcnVpc2VyID0gc2hpcEZhY3RvcnkoXCJjcnVpc2VyXCIsIDMpO1xuICAgIGNvbnN0IGJhdHRsZXNoaXAgPSBzaGlwRmFjdG9yeShcImJhdHRsZXNoaXBcIiwgNCk7XG4gICAgY29uc3QgY2FycmllciA9IHNoaXBGYWN0b3J5KFwiY2FycmllclwiLCA1KTtcbiAgICBcbiAgICBsZXQgc2hpcHMgPSBbZGVzdHJveWVyLCBzdWIsIGNydWlzZXIsIGJhdHRsZXNoaXAsIGNhcnJpZXJdO1xuICAgIC8vIHNoaXBIZWFkcyB3aWxsIGFsd2F5cyBiZSB0aGUgbGVmdC1tb3N0IG9yIHRvcC1tb3N0IGNvb3JkaW5hdGUgZm9yIGVhY2ggc2hpcFxuICAgIGxldCBzaGlwSGVhZHMgPSB7fTtcbiAgICBcbiAgICBjb25zdCBwbGFjZVNoaXAgPSAoY29vcmRzLCBzaGlwKSA9PiB7XG4gICAgICAgIHNoaXBIZWFkc1tgJHtzaGlwLm5hbWV9YF0gPSBjb29yZHNbMF07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjb29yZCA9IGNvb3Jkc1tpXTtcbiAgICAgICAgICAgIGxldCBjb2wgPSBjb29yZFswXTtcbiAgICAgICAgICAgIGxldCByb3cgPSBjb29yZFsxXTtcblxuICAgICAgICAgICAgZ3JpZFtjb2xdW3Jvd10gPSBzaGlwLm5hbWU7IFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY2hlY2tWYWxpZFNob3QgPSAoY29sLCByb3cpID0+IHtcbiAgICAgICAgaWYgKGdyaWRbY29sXVtyb3ddID09PSBcIm1pc3NcIikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyBcbiAgICAgICAgfSBlbHNlIGlmIChncmlkW2NvbF1bcm93XSA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7IFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc2hpcCA9IGdyaWRbY29sXVtyb3ddO1xuICAgICAgICAgICAgY29uc3Qgc2hpcEhlYWQgPSBzaGlwSGVhZHNbc2hpcF07XG4gICAgICAgICAgICBjb25zdCBzaGlwSGVhZENvbCA9IHNoaXBIZWFkWzBdO1xuICAgICAgICAgICAgY29uc3Qgc2hpcEhlYWRSb3cgPSBzaGlwSGVhZFsxXTtcblxuICAgICAgICAgICAgbGV0IG9yaWVudGF0aW9uID0gY2hlY2tPcmllbnRhdGlvbihzaGlwSGVhZCwgc2hpcCk7XG4gICAgICAgICAgICBsZXQgZGlmZmVyZW5jZTsgXG5cbiAgICAgICAgICAgIGlmIChvcmllbnRhdGlvbiA9PT0gXCJ4XCIpIHtcbiAgICAgICAgICAgICAgICBkaWZmZXJlbmNlID0gY29sIC0gc2hpcEhlYWRDb2w7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpZmZlcmVuY2UgPSByb3cgLSBzaGlwSGVhZFJvdzsgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAoc2hpcCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJkZXN0cm95ZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChkZXN0cm95ZXIuc3RhdHVzW2RpZmZlcmVuY2VdID09PSBcImhpdFwiKSA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgICAgICAgICAgICBjYXNlIFwic3ViXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoc3ViLnN0YXR1c1tkaWZmZXJlbmNlXSA9PT0gXCJoaXRcIikgPyBmYWxzZSA6IHRydWU7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNydWlzZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjcnVpc2VyLnN0YXR1c1tkaWZmZXJlbmNlXSA9PT0gXCJoaXRcIikgPyBmYWxzZSA6IHRydWU7XG4gICAgICAgICAgICAgICAgY2FzZSBcImJhdHRsZXNoaXBcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChiYXR0bGVzaGlwLnN0YXR1c1tkaWZmZXJlbmNlXSA9PT0gXCJoaXRcIikgPyBmYWxzZSA6IHRydWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoY2Fycmllci5zdGF0dXNbZGlmZmVyZW5jZV0gPT09IFwiaGl0XCIpID8gZmFsc2UgOiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY2hlY2tPcmllbnRhdGlvbiA9IChjb29yZCwgc2hpcCkgPT4ge1xuICAgICAgICBjb25zdCBjb2wgPSBjb29yZFswXTtcbiAgICAgICAgY29uc3Qgcm93ID0gY29vcmRbMV07XG4gICAgICAgIFxuICAgICAgICBpZiAoY29sICsgMSA+IDkpIHtcbiAgICAgICAgICAgIHJldHVybiBcInlcIjtcbiAgICAgICAgfSBlbHNlIGlmIChncmlkW2NvbCArIDFdW3Jvd10gPT09IHNoaXApIHtcbiAgICAgICAgICAgIHJldHVybiBcInhcIjtcbiAgICAgICAgfSBlbHNlIGlmIChyb3cgKyAxID4gOSkge1xuICAgICAgICAgICAgcmV0dXJuIFwieFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwieVwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmVjZWl2ZUF0dGFjayA9IChjb29yZCkgPT4ge1xuICAgICAgICBjb25zdCBjb2wgPSBjb29yZFswXTtcbiAgICAgICAgY29uc3Qgcm93ID0gY29vcmRbMV07XG5cbiAgICAgICAgaWYgKChncmlkW2NvbF1bcm93XSAhPT0gXCJcIikgJiYgKGdyaWRbY29sXVtyb3ddICE9PSBcIm1pc3NcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBncmlkW2NvbF1bcm93XTtcbiAgICAgICAgICAgIGNvbnN0IHNoaXBIZWFkID0gc2hpcEhlYWRzW3NoaXBdO1xuICAgICAgICAgICAgY29uc3Qgc2hpcEhlYWRDb2wgPSBzaGlwSGVhZFswXTtcbiAgICAgICAgICAgIGNvbnN0IHNoaXBIZWFkUm93ID0gc2hpcEhlYWRbMV07XG5cbiAgICAgICAgICAgIGxldCBvcmllbnRhdGlvbiA9IGNoZWNrT3JpZW50YXRpb24oc2hpcEhlYWQsIHNoaXApO1xuICAgICAgICAgICAgbGV0IGRpZmZlcmVuY2U7IFxuXG4gICAgICAgICAgICBpZiAob3JpZW50YXRpb24gPT09IFwieFwiKSB7XG4gICAgICAgICAgICAgICAgZGlmZmVyZW5jZSA9IGNvbCAtIHNoaXBIZWFkQ29sO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkaWZmZXJlbmNlID0gcm93IC0gc2hpcEhlYWRSb3c7IFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBzd2l0Y2ggKHNoaXApIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiZGVzdHJveWVyXCI6XG4gICAgICAgICAgICAgICAgICAgIGRlc3Ryb3llci5oaXQoZGlmZmVyZW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzdWJcIjpcbiAgICAgICAgICAgICAgICAgICAgc3ViLmhpdChkaWZmZXJlbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNydWlzZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgY3J1aXNlci5oaXQoZGlmZmVyZW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJiYXR0bGVzaGlwXCI6XG4gICAgICAgICAgICAgICAgICAgIGJhdHRsZXNoaXAuaGl0KGRpZmZlcmVuY2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBcbiAgICAgICAgICAgICAgICAgICAgY2Fycmllci5oaXQoZGlmZmVyZW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBncmlkW2NvbF1bcm93XSA9IFwibWlzc1wiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaXNBbGxTdW5rID0gKCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIXNoaXBzW2ldLmlzU3VuaygpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7IFxuICAgIH1cblxuICAgIGNvbnN0IGdldENvbnRlbnRCeUNvb3JkID0gKGNvbCwgcm93KSA9PiB7XG4gICAgICAgIHJldHVybiBncmlkW2NvbF1bcm93XTtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRTaGlwQnlOYW1lID0gKHNoaXApID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHNoaXBzW2ldLm5hbWUgPT09IHNoaXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hpcHNbaV07IFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgc2hpcHMsIGdyaWQsIHBsYWNlU2hpcCwgY2hlY2tWYWxpZFNob3QsIHJlY2VpdmVBdHRhY2ssIGlzQWxsU3VuaywgZ2V0Q29udGVudEJ5Q29vcmQsIGdldFNoaXBCeU5hbWUgfVxufVxuXG5leHBvcnQgeyBnYW1lYm9hcmRGYWN0b3J5IH0iLCJpbXBvcnQgeyBQbGF5ZXIgfSBmcm9tIFwiLi9wbGF5ZXJcIjtcblxuY2xhc3MgQUlQbGF5ZXIgZXh0ZW5kcyBQbGF5ZXIge1xuICAgIGNvbnN0cnVjdG9yKHR1cm4pIHtcbiAgICAgICAgc3VwZXIodHVybik7XG4gICAgfVxufVxuXG5leHBvcnQgeyBBSVBsYXllciB9IiwiaW1wb3J0IHsgUGxheWVyIH0gZnJvbSBcIi4vcGxheWVyXCI7XG5cbmNsYXNzIEh1bWFuUGxheWVyIGV4dGVuZHMgUGxheWVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0dXJuKSB7XG4gICAgICAgIHN1cGVyKHR1cm4pO1xuICAgIH1cblxuICAgIC8vIGFzc3VtZSB0aGF0IHRoZSBjb29yZCB3aWxsIGFsd2F5cyBiZSB2YWxpZCBcbiAgICBtYWtlTW92ZShjb29yZCwgZW5lbXlCb2FyZCkge1xuICAgICAgICBlbmVteUJvYXJkLnJlY2VpdmVBdHRhY2soY29vcmQpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgSHVtYW5QbGF5ZXIgfSIsImltcG9ydCB7IGxvZ2ljQ29udHJvbGxlciB9IGZyb20gXCIuL2RvbS5sb2dpY1wiO1xuaW1wb3J0IHsgQk9BUkRfU0lERSwgZGlzcGxheUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9kaXNwbGF5XCI7XG5cbmNvbnN0IHJvdGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm90YXRlLWJ0blwiKTtcbmNvbnN0IHJlc2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNldC1idG5cIik7XG5cbmNvbnN0IGRldGVjdENvbnRyb2xsZXIgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGRldGVjdFNxdWFyZUNsaWNrID0gKHNxdWFyZSkgPT4ge1xuICAgICAgICBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNxdWFyZU5hbWUgPSBzcXVhcmUuaWQ7XG4gICAgICAgICAgICBjb25zdCBib2FyZE5hbWUgPSBkaXNwbGF5Q29udHJvbGxlci5nZXRCb2FyZE5hbWUoc3F1YXJlTmFtZSk7XG4gICAgICAgICAgICBjb25zdCBjb29yZHMgPSBkaXNwbGF5Q29udHJvbGxlci5nZXRTcXVhcmVDb29yZHMoc3F1YXJlTmFtZSwgYm9hcmROYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IGh1bWFuQm9hcmQgPSBsb2dpY0NvbnRyb2xsZXIuZ2V0SHVtYW5Cb2FyZCgpO1xuICAgICAgICAgICAgY29uc3QgYWlCb2FyZCA9IGxvZ2ljQ29udHJvbGxlci5nZXRBaUJvYXJkKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGNvbCA9IGNvb3Jkc1swXTtcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IGNvb3Jkc1sxXTtcblxuICAgICAgICAgICAgaWYgKGFpQm9hcmQuY2hlY2tWYWxpZFNob3QoY29sLCByb3cpICYmIGxvZ2ljQ29udHJvbGxlci5jaGVja1ZhbGlkVHVybigpICYmICFsb2dpY0NvbnRyb2xsZXIuZ2V0R2FtZU92ZXIoKSAmJiAhbG9naWNDb250cm9sbGVyLnN0aWxsUGxhY2luZ0h1bWFuU2hpcHMoKSkge1xuICAgICAgICAgICAgICAgIGFpQm9hcmQucmVjZWl2ZUF0dGFjayhbY29sLCByb3ddKTtcbiAgICAgICAgICAgICAgICBkaXNwbGF5Q29udHJvbGxlci5yZW5kZXJCb2FyZHMoaHVtYW5Cb2FyZCwgYWlCb2FyZCk7XG4gICAgICAgICAgICAgICAgbG9naWNDb250cm9sbGVyLmNoZWNrR2FtZU92ZXIoKTtcbiAgICAgICAgICAgICAgICBsb2dpY0NvbnRyb2xsZXIuY2hhbmdlVHVybigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBjb29yZFRvQWlJZCA9IChjb2wsIHJvdykgPT4ge1xuICAgICAgICByZXR1cm4gYGFpLXNxdWFyZS0ke2NvbH0tJHtyb3d9YDtcbiAgICB9XG5cbiAgICBjb25zdCBjb29yZFRvSWQgPSAoY29sLCByb3cpID0+IHtcbiAgICAgICAgcmV0dXJuIGB5b3VyLXNxdWFyZS0ke2NvbH0tJHtyb3d9YDtcbiAgICB9XG5cbiAgICBjb25zdCByZW1vdmVTcXVhcmVIb3ZlcnMgPSAoKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQk9BUkRfU0lERTsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IEJPQVJEX1NJREU7IGorKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gY29vcmRUb0lkKGksIGopO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNxdWFyZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoc3F1YXJlLmNsYXNzTGlzdC5jb250YWlucyhcInBsYWNlbWVudC1ob3ZlclwiKSkge1xuICAgICAgICAgICAgICAgICAgICBzcXVhcmUuY2xhc3NMaXN0LnJlbW92ZShcInBsYWNlbWVudC1ob3ZlclwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHNxdWFyZS5jbGFzc0xpc3QuY29udGFpbnMoXCJpbnZhbGlkLXBsYWNlbWVudFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBzcXVhcmUuY2xhc3NMaXN0LnJlbW92ZShcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGNoZWNrQWxyZWFkeVBsYWNlZFNoaXAgPSAoc3F1YXJlcykgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNxdWFyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChzcXVhcmVzW2ldLmNsYXNzTGlzdC5jb250YWlucyhcInlvdXItc2hpcFwiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTsgXG4gICAgfVxuXG4gICAgY29uc3QgZGV0ZWN0U3F1YXJlSG92ZXIgPSAoc3F1YXJlKSA9PiB7XG4gICAgICAgIHNxdWFyZS5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsICgpID0+IHtcbiAgICAgICAgICAgIHJlbW92ZVNxdWFyZUhvdmVycygpO1xuICAgICAgICAgICAgaWYgKGxvZ2ljQ29udHJvbGxlci5zdGlsbFBsYWNpbmdIdW1hblNoaXBzKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlwTmFtZSA9IGxvZ2ljQ29udHJvbGxlci5nZXRDdXJyZW50U2hpcFBsYWNlbWVudCgpO1xuICAgICAgICAgICAgICAgIGRpc3BsYXlDb250cm9sbGVyLnJlbmRlclN0YXR1cyhgUGxhY2UgeW91ciAke3NoaXBOYW1lfSFgKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHNxdWFyZU5hbWUgPSBzcXVhcmUuaWQ7IFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBib2FyZE5hbWUgPSBkaXNwbGF5Q29udHJvbGxlci5nZXRCb2FyZE5hbWUoc3F1YXJlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvb3JkcyA9IGRpc3BsYXlDb250cm9sbGVyLmdldFNxdWFyZUNvb3JkcyhzcXVhcmVOYW1lLCBib2FyZE5hbWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IHBhcnNlSW50KGNvb3Jkc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvdyA9IHBhcnNlSW50KGNvb3Jkc1sxXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobG9naWNDb250cm9sbGVyLmdldFJvdGF0aW9uQXhpcygpID09PSBcInhcIikgeyAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoaXBOYW1lID09PSBcImRlc3Ryb3llclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkU3F1YXJlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29vcmRUb0lkKGNvbCwgcm93KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmVPbmVUb1JpZ2h0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29vcmRUb0lkKGNvbCArIDEsIHJvdykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbCA8IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJwbGFjZW1lbnQtaG92ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlT25lVG9SaWdodC5jbGFzc0xpc3QuYWRkKFwicGxhY2VtZW50LWhvdmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpcE5hbWUgPT09IFwic3ViXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRTcXVhcmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZFRvSWQoY29sLCByb3cpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNxdWFyZU9uZVRvUmlnaHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZFRvSWQoY29sICsgMSwgcm93KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmVUd29Ub1JpZ2h0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29vcmRUb0lkKGNvbCArIDIsIHJvdykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbCA8IDgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tBbHJlYWR5UGxhY2VkU2hpcChbaGVhZFNxdWFyZSwgc3F1YXJlT25lVG9SaWdodCwgc3F1YXJlVHdvVG9SaWdodF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVPbmVUb1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlVHdvVG9SaWdodC5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwicGxhY2VtZW50LWhvdmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVPbmVUb1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJwbGFjZW1lbnQtaG92ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZVR3b1RvUmlnaHQuY2xhc3NMaXN0LmFkZChcInBsYWNlbWVudC1ob3ZlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbCA9PT0gOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVPbmVUb1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpcE5hbWUgPT09IFwiY3J1aXNlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkU3F1YXJlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29vcmRUb0lkKGNvbCwgcm93KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmVPbmVUb1JpZ2h0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29vcmRUb0lkKGNvbCArIDEsIHJvdykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3F1YXJlVHdvVG9SaWdodCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvb3JkVG9JZChjb2wgKyAyLCByb3cpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2wgPCA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrQWxyZWFkeVBsYWNlZFNoaXAoW2hlYWRTcXVhcmUsIHNxdWFyZU9uZVRvUmlnaHQsIHNxdWFyZVR3b1RvUmlnaHRdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlT25lVG9SaWdodC5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZVR3b1RvUmlnaHQuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcInBsYWNlbWVudC1ob3ZlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlT25lVG9SaWdodC5jbGFzc0xpc3QuYWRkKFwicGxhY2VtZW50LWhvdmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVUd29Ub1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJwbGFjZW1lbnQtaG92ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2wgPT09IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlT25lVG9SaWdodC5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoaXBOYW1lID09PSBcImJhdHRsZXNoaXBcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZFNxdWFyZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvb3JkVG9JZChjb2wsIHJvdykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3F1YXJlT25lVG9SaWdodCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvb3JkVG9JZChjb2wgKyAxLCByb3cpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNxdWFyZVR3b1RvUmlnaHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZFRvSWQoY29sICsgMiwgcm93KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmVUaHJlZVRvUmlnaHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZFRvSWQoY29sICsgMywgcm93KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sIDwgNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVja0FscmVhZHlQbGFjZWRTaGlwKFtoZWFkU3F1YXJlLCBzcXVhcmVPbmVUb1JpZ2h0LCBzcXVhcmVUd29Ub1JpZ2h0LCBzcXVhcmVUaHJlZVRvUmlnaHRdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlT25lVG9SaWdodC5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZVR3b1RvUmlnaHQuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVUaHJlZVRvUmlnaHQuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcInBsYWNlbWVudC1ob3ZlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlT25lVG9SaWdodC5jbGFzc0xpc3QuYWRkKFwicGxhY2VtZW50LWhvdmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVUd29Ub1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJwbGFjZW1lbnQtaG92ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZVRocmVlVG9SaWdodC5jbGFzc0xpc3QuYWRkKFwicGxhY2VtZW50LWhvdmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sID09PSA5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbCA9PT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZU9uZVRvUmlnaHQuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVPbmVUb1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVUd29Ub1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaGlwTmFtZSA9PT0gXCJjYXJyaWVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRTcXVhcmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZFRvSWQoY29sLCByb3cpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNxdWFyZU9uZVRvUmlnaHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZFRvSWQoY29sICsgMSwgcm93KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmVUd29Ub1JpZ2h0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29vcmRUb0lkKGNvbCArIDIsIHJvdykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3F1YXJlVGhyZWVUb1JpZ2h0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29vcmRUb0lkKGNvbCArIDMsIHJvdykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3F1YXJlRm91clRvUmlnaHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZFRvSWQoY29sICsgNCwgcm93KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sIDwgNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVja0FscmVhZHlQbGFjZWRTaGlwKFtoZWFkU3F1YXJlLCBzcXVhcmVPbmVUb1JpZ2h0LCBzcXVhcmVUd29Ub1JpZ2h0LCBzcXVhcmVUaHJlZVRvUmlnaHQsIHNxdWFyZUZvdXJUb1JpZ2h0XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZU9uZVRvUmlnaHQuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVUd29Ub1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlVGhyZWVUb1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlRm91clRvUmlnaHQuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcInBsYWNlbWVudC1ob3ZlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlT25lVG9SaWdodC5jbGFzc0xpc3QuYWRkKFwicGxhY2VtZW50LWhvdmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVUd29Ub1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJwbGFjZW1lbnQtaG92ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZVRocmVlVG9SaWdodC5jbGFzc0xpc3QuYWRkKFwicGxhY2VtZW50LWhvdmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVGb3VyVG9SaWdodC5jbGFzc0xpc3QuYWRkKFwicGxhY2VtZW50LWhvdmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sID09PSA5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbCA9PT0gOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZU9uZVRvUmlnaHQuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2wgPT09IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVPbmVUb1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVUd29Ub1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlT25lVG9SaWdodC5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlVHdvVG9SaWdodC5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlVGhyZWVUb1JpZ2h0LmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpcE5hbWUgPT09IFwiZGVzdHJveWVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRTcXVhcmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZFRvSWQoY29sLCByb3cpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNxdWFyZU9uZURvd24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZFRvSWQoY29sLCByb3cgKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93IDwgOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcInBsYWNlbWVudC1ob3ZlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVPbmVEb3duLmNsYXNzTGlzdC5hZGQoXCJwbGFjZW1lbnQtaG92ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaGlwTmFtZSA9PT0gXCJzdWJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZFNxdWFyZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvb3JkVG9JZChjb2wsIHJvdykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3F1YXJlT25lRG93biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvb3JkVG9JZChjb2wsIHJvdyArIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNxdWFyZVR3b0Rvd24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZFRvSWQoY29sLCByb3cgKyAyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93IDwgOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVja0FscmVhZHlQbGFjZWRTaGlwKFtoZWFkU3F1YXJlLCBzcXVhcmVPbmVEb3duLCBzcXVhcmVUd29Eb3duXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZU9uZURvd24uY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVUd29Eb3duLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJwbGFjZW1lbnQtaG92ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZU9uZURvd24uY2xhc3NMaXN0LmFkZChcInBsYWNlbWVudC1ob3ZlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlVHdvRG93bi5jbGFzc0xpc3QuYWRkKFwicGxhY2VtZW50LWhvdmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocm93ID09PSA5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZU9uZURvd24uY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaGlwTmFtZSA9PT0gXCJjcnVpc2VyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRTcXVhcmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZFRvSWQoY29sLCByb3cpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNxdWFyZU9uZURvd24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZFRvSWQoY29sLCByb3cgKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmVUd29Eb3duID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29vcmRUb0lkKGNvbCwgcm93ICsgMikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvdyA8IDgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tBbHJlYWR5UGxhY2VkU2hpcChbaGVhZFNxdWFyZSwgc3F1YXJlT25lRG93biwgc3F1YXJlVHdvRG93bl0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVPbmVEb3duLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlVHdvRG93bi5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwicGxhY2VtZW50LWhvdmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVPbmVEb3duLmNsYXNzTGlzdC5hZGQoXCJwbGFjZW1lbnQtaG92ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZVR3b0Rvd24uY2xhc3NMaXN0LmFkZChcInBsYWNlbWVudC1ob3ZlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJvdyA9PT0gOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVPbmVEb3duLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpcE5hbWUgPT09IFwiYmF0dGxlc2hpcFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkU3F1YXJlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29vcmRUb0lkKGNvbCwgcm93KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmVPbmVEb3duID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29vcmRUb0lkKGNvbCwgcm93ICsgMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3F1YXJlVHdvRG93biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvb3JkVG9JZChjb2wsIHJvdyArIDIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNxdWFyZVRocmVlRG93biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvb3JkVG9JZChjb2wsIHJvdyArIDMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3cgPCA3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrQWxyZWFkeVBsYWNlZFNoaXAoW2hlYWRTcXVhcmUsIHNxdWFyZU9uZURvd24sIHNxdWFyZVR3b0Rvd24sIHNxdWFyZVRocmVlRG93bl0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVPbmVEb3duLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlVHdvRG93bi5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZVRocmVlRG93bi5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwicGxhY2VtZW50LWhvdmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVPbmVEb3duLmNsYXNzTGlzdC5hZGQoXCJwbGFjZW1lbnQtaG92ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZVR3b0Rvd24uY2xhc3NMaXN0LmFkZChcInBsYWNlbWVudC1ob3ZlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlVGhyZWVEb3duLmNsYXNzTGlzdC5hZGQoXCJwbGFjZW1lbnQtaG92ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyb3cgPT09IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocm93ID09PSA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlT25lRG93bi5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZU9uZURvd24uY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZVR3b0Rvd24uY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoaXBOYW1lID09PSBcImNhcnJpZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZFNxdWFyZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvb3JkVG9JZChjb2wsIHJvdykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3F1YXJlT25lRG93biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvb3JkVG9JZChjb2wsIHJvdyArIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNxdWFyZVR3b0Rvd24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZFRvSWQoY29sLCByb3cgKyAyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmVUaHJlZURvd24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZFRvSWQoY29sLCByb3cgKyAzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmVGb3VyRG93biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvb3JkVG9JZChjb2wsIHJvdyArIDQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3cgPCA2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrQWxyZWFkeVBsYWNlZFNoaXAoW2hlYWRTcXVhcmUsIHNxdWFyZU9uZURvd24sIHNxdWFyZVR3b0Rvd24sIHNxdWFyZVRocmVlRG93biwgc3F1YXJlRm91ckRvd25dKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlT25lRG93bi5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZVR3b0Rvd24uY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVUaHJlZURvd24uY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVGb3VyRG93bi5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwicGxhY2VtZW50LWhvdmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVPbmVEb3duLmNsYXNzTGlzdC5hZGQoXCJwbGFjZW1lbnQtaG92ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZVR3b0Rvd24uY2xhc3NMaXN0LmFkZChcInBsYWNlbWVudC1ob3ZlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlVGhyZWVEb3duLmNsYXNzTGlzdC5hZGQoXCJwbGFjZW1lbnQtaG92ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZUZvdXJEb3duLmNsYXNzTGlzdC5hZGQoXCJwbGFjZW1lbnQtaG92ZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyb3cgPT09IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocm93ID09PSA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZFNxdWFyZS5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlT25lRG93bi5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJvdyA9PT0gNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRTcXVhcmUuY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZU9uZURvd24uY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZVR3b0Rvd24uY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVPbmVEb3duLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVUd29Eb3duLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXBsYWNlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVUaHJlZURvd24uY2xhc3NMaXN0LmFkZChcImludmFsaWQtcGxhY2VtZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICAgICAgfSAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcm90YXRlLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgZGV0ZWN0UmVzZXRHYW1lID0gKGJ0bikgPT4ge1xuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIGxvZ2ljQ29udHJvbGxlci5yZXNldEdhbWUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGV0ZWN0UmVzZXRHYW1lKHJlc2V0KTtcblxuICAgIGNvbnN0IGRldGVjdFJvdGF0ZSA9IChidG4pID0+IHtcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAobG9naWNDb250cm9sbGVyLmdldFJvdGF0aW9uQXhpcygpID09PSBcInhcIikge1xuICAgICAgICAgICAgICAgIGxvZ2ljQ29udHJvbGxlci5zZXRSb3RhdGlvbkF4aXMoXCJ5XCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2dpY0NvbnRyb2xsZXIuc2V0Um90YXRpb25BeGlzKFwieFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGV0ZWN0Um90YXRlKHJvdGF0ZSk7XG5cbiAgICBjb25zdCBjaGVja0ZvckdyZWVuU3F1YXJlcyA9ICgpID0+IHtcbiAgICAgICAgbGV0IGNvb3JkcyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQk9BUkRfU0lERTsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IEJPQVJEX1NJREU7IGorKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gY29vcmRUb0lkKGksIGopO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNxdWFyZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChzcXVhcmUuY2xhc3NMaXN0LmNvbnRhaW5zKFwicGxhY2VtZW50LWhvdmVyXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvb3Jkcy5wdXNoKFtpLCBqXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvb3JkcztcbiAgICB9XG5cbiAgICBjb25zdCBjaGVja0ZvckludmFsaWRTcXVhcmVzID0gKCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IEJPQVJEX1NJREU7IGkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBCT0FSRF9TSURFOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGNvb3JkVG9JZChpLCBqKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3F1YXJlLmNsYXNzTGlzdC5jb250YWlucyhcImludmFsaWQtcGxhY2VtZW50XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7IFxuICAgIH1cblxuICAgIGNvbnN0IGRldGVjdEh1bWFuU3F1YXJlQ2xpY2sgPSAoc3F1YXJlKSA9PiB7XG4gICAgICAgIHNxdWFyZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGxvZ2ljQ29udHJvbGxlci5zdGlsbFBsYWNpbmdIdW1hblNoaXBzKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb29yZHMgPSBjaGVja0ZvckdyZWVuU3F1YXJlcygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSBjaGVja0ZvckludmFsaWRTcXVhcmVzKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hpcE5hbWUgPSBsb2dpY0NvbnRyb2xsZXIuZ2V0Q3VycmVudFNoaXBQbGFjZW1lbnQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlwID0gbG9naWNDb250cm9sbGVyLmdldFNoaXBCeU5hbWUoc2hpcE5hbWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGh1bWFuQm9hcmQgPSBsb2dpY0NvbnRyb2xsZXIuZ2V0SHVtYW5Cb2FyZCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFpQm9hcmQgPSBsb2dpY0NvbnRyb2xsZXIuZ2V0QWlCb2FyZCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgc3F1YXJlcyBmb3IgZ3JlZW4gXG4gICAgICAgICAgICAgICAgLy8gZ2V0IHRoZSBjb29yZHNcbiAgICAgICAgICAgICAgICAvLyBwbGFjZSB0aGUgc2hpcFxuICAgICAgICAgICAgICAgIC8vIHJlcmVuZGVyIGFuZCB3YWl0IFxuICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2ljQ29udHJvbGxlci5odW1hblBsYWNlU2hpcChodW1hbkJvYXJkLCBjb29yZHMsIHNoaXApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRpc3BsYXlDb250cm9sbGVyLnJlbmRlckJvYXJkcyhodW1hbkJvYXJkLCBhaUJvYXJkKTtcbiAgICAgICAgICAgICAgICAvLyBkb24ndCBhbGxvdyBwbGF5ZXIgdG8gY2xpY2sgQUkgYm9hcmQgKFRPRE8pXG4gICAgICAgICAgICAgICAgLy8gZG9uJ3QgYWxsb3cgaG92ZXIgaWYgd29uIGFscmVhZHlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzZXRBbGxUb1doaXRlQnV0U2hvdEJlZm9yZSA9ICgpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBCT0FSRF9TSURFOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgQk9BUkRfU0lERTsgaisrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBjb29yZFRvQWlJZChpLCBqKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCFzcXVhcmUuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hvdC1iZWZvcmVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgc3F1YXJlLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiI0ZGRlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGRldGVjdEFpU3F1YXJlSG92ZXIgPSAoc3F1YXJlKSA9PiB7XG4gICAgICAgIHNxdWFyZS5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsICgpID0+IHtcbiAgICAgICAgICAgIHJlc2V0QWxsVG9XaGl0ZUJ1dFNob3RCZWZvcmUoKTtcblxuICAgICAgICAgICAgaWYgKCFsb2dpY0NvbnRyb2xsZXIuZ2V0R2FtZU92ZXIoKSAmJiAhbG9naWNDb250cm9sbGVyLnN0aWxsUGxhY2luZ0h1bWFuU2hpcHMoKSkge1xuICAgICAgICAgICAgICAgIGlmICghc3F1YXJlLmNsYXNzTGlzdC5jb250YWlucyhcIm1pc3NcIikgJiYgIXNxdWFyZS5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG90LWJlZm9yZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICBzcXVhcmUuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIiM4MDgwODBcIjtcbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBkZXRlY3RTcXVhcmVDbGljaywgZGV0ZWN0U3F1YXJlSG92ZXIsIGRldGVjdEh1bWFuU3F1YXJlQ2xpY2ssIGRldGVjdEFpU3F1YXJlSG92ZXIgfVxufSkoKTtcblxuZXhwb3J0IHsgZGV0ZWN0Q29udHJvbGxlciB9IiwiaW1wb3J0IHsgZGV0ZWN0Q29udHJvbGxlciB9IGZyb20gXCIuL2RldGVjdFwiO1xuaW1wb3J0IHsgbG9naWNDb250cm9sbGVyIH0gZnJvbSBcIi4vZG9tLmxvZ2ljXCI7XG5pbXBvcnQgbG9nbyBmcm9tIFwiLi4vaW1hZ2VzL2JhdHRsZXNoaXAucG5nXCI7XG5cbmNvbnN0IHN0YXR1cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhdHVzLW1lc3NhZ2VcIik7XG5jb25zdCB5b3VyQm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInlvdXItYm9hcmRcIik7XG5jb25zdCBhaUJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhaS1ib2FyZFwiKTtcblxuY29uc3Qgcm90YXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb3RhdGUtYnRuXCIpO1xuY29uc3QgcmVzZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc2V0LWJ0blwiKTtcblxuY29uc3QgaWNvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWNvblwiKTtcbmljb24uaHJlZiA9IGxvZ287XG5cbmNvbnN0IEJPQVJEX1NJREUgPSAxMDsgXG5cbmNvbnN0IGRpc3BsYXlDb250cm9sbGVyID0gKCgpID0+IHtcbiAgICBjb25zdCByZW5kZXJSb3RhdGVCdG4gPSAoKSA9PiB7XG4gICAgICAgIHJvdGF0ZS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIH1cblxuICAgIGNvbnN0IHJlbmRlclJlc2V0QnRuID0gKCkgPT4ge1xuICAgICAgICByZXNldC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIH1cblxuICAgIGNvbnN0IGhpZGVSZXNldEJ0biA9ICgpID0+IHtcbiAgICAgICAgcmVzZXQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIH1cblxuICAgIGNvbnN0IHJlbmRlclN0YXR1cyA9ICh0ZXh0KSA9PiB7XG4gICAgICAgIHN0YXR1cy5pbm5lclRleHQgPSB0ZXh0OyBcbiAgICB9XG5cbiAgICBjb25zdCBnZXRCb2FyZE5hbWUgPSAoc3F1YXJlTmFtZSkgPT4ge1xuICAgICAgICByZXR1cm4gKHNxdWFyZU5hbWVbMF0gPT09IFwieVwiKSA/IFwieW91XCIgOiBcImFpXCI7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0U3F1YXJlQ29vcmRzID0gKHNxdWFyZU5hbWUsIGJvYXJkTmFtZSkgPT4ge1xuICAgICAgICBsZXQgY29vcmRzID0gW107XG5cbiAgICAgICAgaWYgKGJvYXJkTmFtZSA9PT0gXCJ5b3VcIikge1xuICAgICAgICAgICAgY29uc3QgY29sID0gc3F1YXJlTmFtZS5zdWJzdHJpbmcoMTIsIDEzKTtcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IHNxdWFyZU5hbWUuc3Vic3RyaW5nKDE0LCAxNSk7XG5cbiAgICAgICAgICAgIGNvb3Jkcy5wdXNoKGNvbCk7XG4gICAgICAgICAgICBjb29yZHMucHVzaChyb3cpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY29sID0gc3F1YXJlTmFtZS5zdWJzdHJpbmcoMTAsIDExKTtcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IHNxdWFyZU5hbWUuc3Vic3RyaW5nKDEyLCAxMyk7XG5cbiAgICAgICAgICAgIGNvb3Jkcy5wdXNoKGNvbCk7XG4gICAgICAgICAgICBjb29yZHMucHVzaChyb3cpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvb3JkcztcbiAgICB9XG5cbiAgICBjb25zdCBfY2xlYXJCb2FyZHMgPSAoKSA9PiB7XG4gICAgICAgIC8vIFRPRE86IG1heSBoYXZlIHRvIHJlbW92ZSBhbGwgcHJldmlvdXMgbGlzdGVuZXJzIHRvIHNxdWFyZXNcbiAgICAgICAgeW91ckJvYXJkLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIGFpQm9hcmQuaW5uZXJIVE1MID0gXCJcIjtcbiAgICB9XG5cbiAgICBjb25zdCByZW5kZXJCb2FyZHMgPSAoYm9hcmQxLCBib2FyZDIpID0+IHtcbiAgICAgICAgX2NsZWFyQm9hcmRzKCk7XG5cbiAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgQk9BUkRfU0lERTsgcm93KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IEJPQVJEX1NJREU7IGNvbCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGJvYXJkMUNvbnRlbnQgPSBib2FyZDEuZ2V0Q29udGVudEJ5Q29vcmQoY29sLCByb3cpO1xuICAgICAgICAgICAgICAgIGxldCBib2FyZDJDb250ZW50ID0gYm9hcmQyLmdldENvbnRlbnRCeUNvb3JkKGNvbCwgcm93KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHlvdXJTcXVhcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIHlvdXJTcXVhcmUuY2xhc3NMaXN0LmFkZChcInNxdWFyZVwiKTtcbiAgICAgICAgICAgICAgICB5b3VyU3F1YXJlLmlkID0gYHlvdXItc3F1YXJlLSR7Y29sfS0ke3Jvd31gO1xuICAgICAgICAgICAgICAgIHlvdXJCb2FyZC5hcHBlbmRDaGlsZCh5b3VyU3F1YXJlKTsgXG5cbiAgICAgICAgICAgICAgICAvLyBQTEFDSU5HXG4gICAgICAgICAgICAgICAgZGV0ZWN0Q29udHJvbGxlci5kZXRlY3RTcXVhcmVIb3Zlcih5b3VyU3F1YXJlKTtcbiAgICAgICAgICAgICAgICBkZXRlY3RDb250cm9sbGVyLmRldGVjdEh1bWFuU3F1YXJlQ2xpY2soeW91clNxdWFyZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGJvYXJkMUNvbnRlbnQgPT09IFwibWlzc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHhNYXJrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlcIik7XG4gICAgICAgICAgICAgICAgICAgIHhNYXJrLmNsYXNzTGlzdC5hZGQoXCJmYS1zb2xpZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgeE1hcmsuY2xhc3NMaXN0LmFkZChcImZhLXhtYXJrXCIpO1xuICAgICAgICAgICAgICAgICAgICB5b3VyU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJtaXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICB5b3VyU3F1YXJlLmFwcGVuZENoaWxkKHhNYXJrKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJvYXJkMUNvbnRlbnQgPT09IFwiXCIpIHtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGtub3cgdGhhdCBpdCdzIG5vdCBcIm1pc3NcIiBvciBcIlwiXG4gICAgICAgICAgICAgICAgICAgIGlmICghYm9hcmQxLmNoZWNrVmFsaWRTaG90KGNvbCwgcm93KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeW91clNxdWFyZS5jbGFzc0xpc3QuYWRkKFwic2hvdC1iZWZvcmVcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBib2FyZDEuZ2V0Q29udGVudEJ5Q29vcmQoY29sLCByb3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3VuayA9IGxvZ2ljQ29udHJvbGxlci5jaGVja1NoaXBTdW5rKFwiaHVtYW5cIiwgc2hpcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdW5rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91clNxdWFyZS5jbGFzc0xpc3QuYWRkKFwic2hpcC1zdW5rXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4TWFyayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeE1hcmsuY2xhc3NMaXN0LmFkZChcImZhLXNvbGlkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeE1hcmsuY2xhc3NMaXN0LmFkZChcImZhLXhtYXJrXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeW91clNxdWFyZS5hcHBlbmRDaGlsZCh4TWFyayk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5b3VyU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJ5b3VyLXNoaXBcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBhaVNxdWFyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgYWlTcXVhcmUuY2xhc3NMaXN0LmFkZChcInNxdWFyZVwiKTtcbiAgICAgICAgICAgICAgICBhaVNxdWFyZS5pZCA9IGBhaS1zcXVhcmUtJHtjb2x9LSR7cm93fWA7XG4gICAgICAgICAgICAgICAgYWlCb2FyZC5hcHBlbmRDaGlsZChhaVNxdWFyZSk7IFxuXG4gICAgICAgICAgICAgICAgZGV0ZWN0Q29udHJvbGxlci5kZXRlY3RTcXVhcmVDbGljayhhaVNxdWFyZSk7XG4gICAgICAgICAgICAgICAgZGV0ZWN0Q29udHJvbGxlci5kZXRlY3RBaVNxdWFyZUhvdmVyKGFpU3F1YXJlKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoYm9hcmQyQ29udGVudCA9PT0gXCJtaXNzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeE1hcmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaVwiKTtcbiAgICAgICAgICAgICAgICAgICAgeE1hcmsuY2xhc3NMaXN0LmFkZChcImZhLXNvbGlkXCIpO1xuICAgICAgICAgICAgICAgICAgICB4TWFyay5jbGFzc0xpc3QuYWRkKFwiZmEteG1hcmtcIik7XG4gICAgICAgICAgICAgICAgICAgIGFpU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJtaXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICBhaVNxdWFyZS5hcHBlbmRDaGlsZCh4TWFyayk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChib2FyZDJDb250ZW50ID09PSBcIlwiKSB7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBrbm93IHRoYXQgaXQncyBub3QgXCJtaXNzXCIgb3IgXCJcIlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWJvYXJkMi5jaGVja1ZhbGlkU2hvdChjb2wsIHJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFpU3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJzaG90LWJlZm9yZVwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hpcCA9IGJvYXJkMi5nZXRDb250ZW50QnlDb29yZChjb2wsIHJvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdW5rID0gbG9naWNDb250cm9sbGVyLmNoZWNrU2hpcFN1bmsoXCJhaVwiLCBzaGlwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1bmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaVNxdWFyZS5jbGFzc0xpc3QuYWRkKFwic2hpcC1zdW5rXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4TWFyayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeE1hcmsuY2xhc3NMaXN0LmFkZChcImZhLXNvbGlkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeE1hcmsuY2xhc3NMaXN0LmFkZChcImZhLXhtYXJrXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWlTcXVhcmUuYXBwZW5kQ2hpbGQoeE1hcmspO1xuICAgICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7IHJlbmRlclN0YXR1cywgcmVuZGVyQm9hcmRzLCBnZXRCb2FyZE5hbWUsIGdldFNxdWFyZUNvb3JkcywgcmVuZGVyUmVzZXRCdG4sIHJlbmRlclJvdGF0ZUJ0biwgaGlkZVJlc2V0QnRuIH1cbn0pKCk7XG5cbmV4cG9ydCB7IGRpc3BsYXlDb250cm9sbGVyLCBCT0FSRF9TSURFIH0iLCJpbXBvcnQgeyBBSVBsYXllciB9IGZyb20gXCIuLi9sb2dpYy9haS5wbGF5ZXJcIjtcbmltcG9ydCB7IEh1bWFuUGxheWVyIH0gZnJvbSBcIi4uL2xvZ2ljL2h1bWFuLnBsYXllclwiO1xuaW1wb3J0IHsgZGlzcGxheUNvbnRyb2xsZXIgfSBmcm9tIFwiLi9kaXNwbGF5XCI7XG5pbXBvcnQgeyBzaGlwRmFjdG9yeSB9IGZyb20gXCIuLi9sb2dpYy9zaGlwXCI7XG5cbmNvbnN0IGdlbmVyYXRlUmFuZG9tTnVtYmVyID0gKG1pbiwgbWF4KSA9PiB7XG4gICAgY29uc3QgbnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpICsgbWluKTsgXG4gICAgcmV0dXJuIG51bWJlcjsgXG59XG5cbmNvbnN0IGdlbmVyYXRlUmFuZG9tRGlyZWN0aW9uID0gKCkgPT4ge1xuICAgIGNvbnN0IG51bWJlciA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSk7XG4gICAgcmV0dXJuIChudW1iZXIgPT09IDApID8gXCJ4XCIgOiBcInlcIjtcbn1cblxuY29uc3QgbG9naWNDb250cm9sbGVyID0gKCgpID0+IHtcbiAgICBsZXQgZ2FtZU92ZXI7XG4gICAgbGV0IGh1bWFuUGxheWVyO1xuICAgIGxldCBhaVBsYXllcjtcblxuICAgIGxldCBkZXN0cm95ZXIgPSBzaGlwRmFjdG9yeShcImRlc3Ryb3llclwiLCAyKTtcbiAgICBsZXQgc3ViID0gc2hpcEZhY3RvcnkoXCJzdWJcIiwgMyk7XG4gICAgbGV0IGNydWlzZXIgPSBzaGlwRmFjdG9yeShcImNydWlzZXJcIiwgMyk7XG4gICAgbGV0IGJhdHRsZXNoaXAgPSBzaGlwRmFjdG9yeShcImJhdHRsZXNoaXBcIiwgNCk7XG4gICAgbGV0IGNhcnJpZXIgPSBzaGlwRmFjdG9yeShcImNhcnJpZXJcIiwgNSk7XG5cbiAgICBsZXQgc2hpcHMgPSBbZGVzdHJveWVyLCBzdWIsIGNydWlzZXIsIGJhdHRsZXNoaXAsIGNhcnJpZXJdO1xuXG4gICAgY29uc3QgZ2V0U2hpcEJ5TmFtZSA9IChzaGlwTmFtZSkgPT4ge1xuICAgICAgICBzd2l0Y2ggKHNoaXBOYW1lKSB7XG4gICAgICAgICAgICBjYXNlIFwiZGVzdHJveWVyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc3Ryb3llcjtcbiAgICAgICAgICAgIGNhc2UgXCJzdWJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViO1xuICAgICAgICAgICAgY2FzZSBcImNydWlzZXJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gY3J1aXNlcjtcbiAgICAgICAgICAgIGNhc2UgXCJiYXR0bGVzaGlwXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhdHRsZXNoaXA7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBjYXJyaWVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgX2ZpbGxCb2FyZCA9IChib2FyZCkgPT4ge1xuICAgICAgICBib2FyZC5wbGFjZVNoaXAoW1swLCAwXSwgWzEsIDBdXSwgZGVzdHJveWVyKTtcbiAgICAgICAgYm9hcmQucGxhY2VTaGlwKFtbMiwgMF0sIFszLCAwXSwgWzQsIDBdXSwgc3ViKTtcbiAgICAgICAgYm9hcmQucGxhY2VTaGlwKFtbNSwgMF0sIFs2LCAwXSwgWzcsIDBdXSwgY3J1aXNlcik7XG4gICAgICAgIGJvYXJkLnBsYWNlU2hpcChbWzAsIDFdLCBbMCwgMl0sIFswLCAzXSwgWzAsIDRdXSwgYmF0dGxlc2hpcCk7XG4gICAgICAgIGJvYXJkLnBsYWNlU2hpcChbWzAsIDVdLCBbMCwgNl0sIFswLCA3XSwgWzAsIDhdLCBbMCwgOV1dLCBjYXJyaWVyKTtcbiAgICB9XG5cbiAgICBjb25zdCBfZ2V0WENvb3JkcyA9IChzaGlwTmFtZSkgPT4ge1xuICAgICAgICBsZXQgaGVhZENvbDtcbiAgICAgICAgbGV0IGhlYWRSb3c7XG5cbiAgICAgICAgaWYgKHNoaXBOYW1lID09PSBcImRlc3Ryb3llclwiKSB7XG4gICAgICAgICAgICBoZWFkQ29sID0gZ2VuZXJhdGVSYW5kb21OdW1iZXIoMCwgOCk7XG4gICAgICAgICAgICBoZWFkUm93ID0gZ2VuZXJhdGVSYW5kb21OdW1iZXIoMCwgOSk7XG5cbiAgICAgICAgICAgIHJldHVybiBbW2hlYWRDb2wsIGhlYWRSb3ddLCBbaGVhZENvbCArIDEsIGhlYWRSb3ddXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGlwTmFtZSA9PT0gXCJzdWJcIikge1xuICAgICAgICAgICAgaGVhZENvbCA9IGdlbmVyYXRlUmFuZG9tTnVtYmVyKDAsIDcpO1xuICAgICAgICAgICAgaGVhZFJvdyA9IGdlbmVyYXRlUmFuZG9tTnVtYmVyKDAsIDkpO1xuXG4gICAgICAgICAgICByZXR1cm4gW1toZWFkQ29sLCBoZWFkUm93XSwgW2hlYWRDb2wgKyAxLCBoZWFkUm93XSwgW2hlYWRDb2wgKyAyLCBoZWFkUm93XV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hpcE5hbWUgPT09IFwiY3J1aXNlclwiKSB7XG4gICAgICAgICAgICBoZWFkQ29sID0gZ2VuZXJhdGVSYW5kb21OdW1iZXIoMCwgNik7XG4gICAgICAgICAgICBoZWFkUm93ID0gZ2VuZXJhdGVSYW5kb21OdW1iZXIoMCwgOSk7XG5cbiAgICAgICAgICAgIHJldHVybiBbW2hlYWRDb2wsIGhlYWRSb3ddLCBbaGVhZENvbCArIDEsIGhlYWRSb3ddLCBbaGVhZENvbCArIDIsIGhlYWRSb3ddXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGlwTmFtZSA9PT0gXCJiYXR0bGVzaGlwXCIpIHtcbiAgICAgICAgICAgIGhlYWRDb2wgPSBnZW5lcmF0ZVJhbmRvbU51bWJlcigwLCA2KTtcbiAgICAgICAgICAgIGhlYWRSb3cgPSBnZW5lcmF0ZVJhbmRvbU51bWJlcigwLCA5KTtcblxuICAgICAgICAgICAgcmV0dXJuIFtbaGVhZENvbCwgaGVhZFJvd10sIFtoZWFkQ29sICsgMSwgaGVhZFJvd10sIFtoZWFkQ29sICsgMiwgaGVhZFJvd10sIFtoZWFkQ29sICsgMywgaGVhZFJvd11dO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoaXBOYW1lID09PSBcImNhcnJpZXJcIikge1xuICAgICAgICAgICAgaGVhZENvbCA9IGdlbmVyYXRlUmFuZG9tTnVtYmVyKDAsIDUpO1xuICAgICAgICAgICAgaGVhZFJvdyA9IGdlbmVyYXRlUmFuZG9tTnVtYmVyKDAsIDkpO1xuXG4gICAgICAgICAgICByZXR1cm4gW1toZWFkQ29sLCBoZWFkUm93XSwgW2hlYWRDb2wgKyAxLCBoZWFkUm93XSwgW2hlYWRDb2wgKyAyLCBoZWFkUm93XSwgW2hlYWRDb2wgKyAzLCBoZWFkUm93XSwgW2hlYWRDb2wgKyA0LCBoZWFkUm93XV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBfZ2V0WUNvb3JkcyA9IChzaGlwTmFtZSkgPT4ge1xuICAgICAgICBsZXQgaGVhZENvbDtcbiAgICAgICAgbGV0IGhlYWRSb3c7IFxuXG4gICAgICAgIGlmIChzaGlwTmFtZSA9PT0gXCJkZXN0cm95ZXJcIikge1xuICAgICAgICAgICAgaGVhZENvbCA9IGdlbmVyYXRlUmFuZG9tTnVtYmVyKDAsIDkpO1xuICAgICAgICAgICAgaGVhZFJvdyA9IGdlbmVyYXRlUmFuZG9tTnVtYmVyKDAsIDgpO1xuXG4gICAgICAgICAgICByZXR1cm4gW1toZWFkQ29sLCBoZWFkUm93XSwgW2hlYWRDb2wsIGhlYWRSb3cgKyAxXV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hpcE5hbWUgPT09IFwic3ViXCIpIHtcbiAgICAgICAgICAgIGhlYWRDb2wgPSBnZW5lcmF0ZVJhbmRvbU51bWJlcigwLCA5KTtcbiAgICAgICAgICAgIGhlYWRSb3cgPSBnZW5lcmF0ZVJhbmRvbU51bWJlcigwLCA3KTtcblxuICAgICAgICAgICAgcmV0dXJuIFtbaGVhZENvbCwgaGVhZFJvd10sIFtoZWFkQ29sLCBoZWFkUm93ICsgMV0sIFtoZWFkQ29sLCBoZWFkUm93ICsgMl1dO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoaXBOYW1lID09PSBcImNydWlzZXJcIikge1xuICAgICAgICAgICAgaGVhZENvbCA9IGdlbmVyYXRlUmFuZG9tTnVtYmVyKDAsIDkpO1xuICAgICAgICAgICAgaGVhZFJvdyA9IGdlbmVyYXRlUmFuZG9tTnVtYmVyKDAsIDYpO1xuXG4gICAgICAgICAgICByZXR1cm4gW1toZWFkQ29sLCBoZWFkUm93XSwgW2hlYWRDb2wsIGhlYWRSb3cgKyAxXSwgW2hlYWRDb2wsIGhlYWRSb3cgKyAyXV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hpcE5hbWUgPT09IFwiYmF0dGxlc2hpcFwiKSB7XG4gICAgICAgICAgICBoZWFkQ29sID0gZ2VuZXJhdGVSYW5kb21OdW1iZXIoMCwgOSk7XG4gICAgICAgICAgICBoZWFkUm93ID0gZ2VuZXJhdGVSYW5kb21OdW1iZXIoMCwgNik7XG5cbiAgICAgICAgICAgIHJldHVybiBbW2hlYWRDb2wsIGhlYWRSb3ddLCBbaGVhZENvbCwgaGVhZFJvdyArIDFdLCBbaGVhZENvbCwgaGVhZFJvdyArIDJdLCBbaGVhZENvbCwgaGVhZFJvdyArIDNdXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGlwTmFtZSA9PT0gXCJjYXJyaWVyXCIpIHtcbiAgICAgICAgICAgIGhlYWRDb2wgPSBnZW5lcmF0ZVJhbmRvbU51bWJlcigwLCA5KTtcbiAgICAgICAgICAgIGhlYWRSb3cgPSBnZW5lcmF0ZVJhbmRvbU51bWJlcigwLCA1KTtcblxuICAgICAgICAgICAgcmV0dXJuIFtbaGVhZENvbCwgaGVhZFJvd10sIFtoZWFkQ29sLCBoZWFkUm93ICsgMV0sIFtoZWFkQ29sLCBoZWFkUm93ICsgMl0sIFtoZWFkQ29sLCBoZWFkUm93ICsgM10sIFtoZWFkQ29sLCBoZWFkUm93ICsgNF1dO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgX3Jlc2V0Q2hhbmdlZENvb3JkcyA9IChjb29yZHMsIHRlbXBHcmlkKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpdGhDb29yZHMgPSBjb29yZHNbaV07XG4gICAgICAgICAgICBjb25zdCBjb2wgPSBpdGhDb29yZHNbMF07XG4gICAgICAgICAgICBjb25zdCByb3cgPSBpdGhDb29yZHNbMV07XG5cbiAgICAgICAgICAgIHRlbXBHcmlkW2NvbF1bcm93XSA9IFwiXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBfY2hlY2tDb29yZHMgPSAoc2hpcE5hbWUsIGNvb3JkcywgdGVtcEdyaWQpID0+IHtcbiAgICAgICAgY29uc3QgdGVtcENvb3JkcyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpdGhDb29yZHMgPSBjb29yZHNbaV07XG4gICAgICAgICAgICBjb25zdCBjb2wgPSBpdGhDb29yZHNbMF07XG4gICAgICAgICAgICBjb25zdCByb3cgPSBpdGhDb29yZHNbMV07XG5cbiAgICAgICAgICAgIGlmICh0ZW1wR3JpZFtjb2xdW3Jvd10gIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBfcmVzZXRDaGFuZ2VkQ29vcmRzKHRlbXBDb29yZHMsIHRlbXBHcmlkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZW1wR3JpZFtjb2xdW3Jvd10gPSBzaGlwTmFtZTtcbiAgICAgICAgICAgICAgICB0ZW1wQ29vcmRzLnB1c2goW2NvbCwgcm93XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTsgXG4gICAgfVxuXG4gICAgY29uc3QgX2ZpbGxBaUJvYXJkID0gKGJvYXJkKSA9PiB7XG4gICAgICAgIGxldCB0ZW1wR3JpZCA9IFtbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl1dO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBzaGlwc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHNoaXBOYW1lID0gc2hpcC5uYW1lO1xuICAgICAgICAgICAgbGV0IGlzR29vZFBsYWNlbWVudCA9IGZhbHNlOyBcblxuICAgICAgICAgICAgd2hpbGUgKCFpc0dvb2RQbGFjZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBnZW5lcmF0ZVJhbmRvbURpcmVjdGlvbigpO1xuICAgICAgICAgICAgICAgIGxldCBjb29yZHM7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBcInhcIikge1xuICAgICAgICAgICAgICAgICAgICBjb29yZHMgPSBfZ2V0WENvb3JkcyhzaGlwTmFtZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29vcmRzID0gX2dldFlDb29yZHMoc2hpcE5hbWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfY2hlY2tDb29yZHMoc2hpcE5hbWUsIGNvb3JkcywgdGVtcEdyaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvYXJkLnBsYWNlU2hpcChjb29yZHMsIHNoaXApO1xuICAgICAgICAgICAgICAgICAgICBpc0dvb2RQbGFjZW1lbnQgPSB0cnVlOyBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcm90YXRpb25BeGlzID0gXCJ4XCI7XG5cbiAgICBjb25zdCBzZXRSb3RhdGlvbkF4aXMgPSAodmFsdWUpID0+IHtcbiAgICAgICAgcm90YXRpb25BeGlzID0gdmFsdWU7IFxuICAgIH1cblxuICAgIGNvbnN0IGdldFJvdGF0aW9uQXhpcyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHJvdGF0aW9uQXhpcztcbiAgICB9XG5cbiAgICBjb25zdCBzdGlsbFBsYWNpbmdIdW1hblNoaXBzID0gKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IHNoaXBOYW1lIGluIHNoaXBQbGFjZW1lbnRTdGF0dXNlcykge1xuICAgICAgICAgICAgaWYgKCFzaGlwUGxhY2VtZW50U3RhdHVzZXNbc2hpcE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNoZWNrR2FtZU92ZXIoKSkge1xuICAgICAgICAgICAgZGlzcGxheUNvbnRyb2xsZXIucmVuZGVyU3RhdHVzKFwiSXQncyB5b3VyIHR1cm4gdG8gYXR0YWNrIVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTsgXG4gICAgfVxuXG4gICAgY29uc3QgX3Jlc2V0U2hpcFN0YXR1c2VzID0gKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IHNoaXBOYW1lIGluIHNoaXBQbGFjZW1lbnRTdGF0dXNlcykge1xuICAgICAgICAgICAgc2hpcFBsYWNlbWVudFN0YXR1c2VzW3NoaXBOYW1lXSA9IGZhbHNlOyBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxldCBzaGlwUGxhY2VtZW50U3RhdHVzZXMgPSB7IFwiZGVzdHJveWVyXCIgOiBmYWxzZSwgXCJzdWJcIiA6IGZhbHNlLCBcImNydWlzZXJcIiA6IGZhbHNlLCBcImJhdHRsZXNoaXBcIiA6IGZhbHNlLCBcImNhcnJpZXJcIiA6IGZhbHNlIH07XG5cbiAgICBsZXQgY3VycmVudFNoaXBQbGFjZW1lbnQ7XG5cbiAgICBjb25zdCBnZXRDdXJyZW50U2hpcFBsYWNlbWVudCA9ICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBzaGlwTmFtZSBpbiBzaGlwUGxhY2VtZW50U3RhdHVzZXMpIHtcbiAgICAgICAgICAgIGlmICghc2hpcFBsYWNlbWVudFN0YXR1c2VzW3NoaXBOYW1lXSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTaGlwUGxhY2VtZW50ID0gc2hpcE5hbWU7IFxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50U2hpcFBsYWNlbWVudDtcbiAgICAgICAgICAgIH0gXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBodW1hblBsYWNlU2hpcCA9IChib2FyZCwgY29vcmRzLCBzaGlwKSA9PiB7XG4gICAgICAgIGJvYXJkLnBsYWNlU2hpcChjb29yZHMsIHNoaXApO1xuICAgICAgICBzaGlwUGxhY2VtZW50U3RhdHVzZXNbc2hpcC5uYW1lXSA9IHRydWU7IFxuICAgIH1cblxuICAgIGNvbnN0IF9tYWtlQUlNb3ZlID0gKGVuZW15Qm9hcmQpID0+IHtcbiAgICAgICAgbGV0IGlzVmFsaWRDb29yZCA9IGZhbHNlOyBcbiAgICAgICAgY29uc3QgaHVtYW5Cb2FyZCA9IGdldEh1bWFuQm9hcmQoKTtcbiAgICAgICAgY29uc3QgYWlCb2FyZCA9IGdldEFpQm9hcmQoKTtcblxuICAgICAgICB3aGlsZSAoIWlzVmFsaWRDb29yZCkge1xuICAgICAgICAgICAgbGV0IHhDb29yZCA9IGdlbmVyYXRlUmFuZG9tTnVtYmVyKDAsIDkpO1xuICAgICAgICAgICAgbGV0IHlDb29yZCA9IGdlbmVyYXRlUmFuZG9tTnVtYmVyKDAsIDkpO1xuXG4gICAgICAgICAgICBpZiAoZW5lbXlCb2FyZC5jaGVja1ZhbGlkU2hvdCh4Q29vcmQsIHlDb29yZCkpIHtcbiAgICAgICAgICAgICAgICBlbmVteUJvYXJkLnJlY2VpdmVBdHRhY2soW3hDb29yZCwgeUNvb3JkXSk7XG4gICAgICAgICAgICAgICAgaXNWYWxpZENvb3JkID0gdHJ1ZTsgXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkaXNwbGF5Q29udHJvbGxlci5yZW5kZXJCb2FyZHMoaHVtYW5Cb2FyZCwgYWlCb2FyZCk7XG4gICAgICAgIGNoZWNrR2FtZU92ZXIoKTtcbiAgICAgICAgY2hhbmdlVHVybigpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc2V0R2FtZSA9ICgpID0+IHtcbiAgICAgICAgZ2FtZU92ZXIgPSBmYWxzZTtcblxuICAgICAgICBfcmVzZXRTaGlwU3RhdHVzZXMoKTtcblxuICAgICAgICBodW1hblBsYXllciA9IG5ldyBIdW1hblBsYXllcih0cnVlKTtcbiAgICAgICAgYWlQbGF5ZXIgPSBuZXcgQUlQbGF5ZXIoZmFsc2UpO1xuXG4gICAgICAgIGh1bWFuUGxheWVyLnNldFR1cm4odHJ1ZSk7XG4gICAgICAgIGFpUGxheWVyLnNldFR1cm4oZmFsc2UpO1xuXG4gICAgICAgIGRpc3BsYXlDb250cm9sbGVyLnJlbmRlclN0YXR1cyhcIlBsYWNlIHlvdXIgZGVzdHJveWVyIVwiKTtcbiAgICAgICAgZGlzcGxheUNvbnRyb2xsZXIucmVuZGVyUm90YXRlQnRuKCk7XG4gICAgICAgIGRpc3BsYXlDb250cm9sbGVyLmhpZGVSZXNldEJ0bigpO1xuXG4gICAgICAgIGNvbnN0IGh1bWFuQm9hcmQgPSBodW1hblBsYXllci5nZXRCb2FyZCgpO1xuICAgICAgICBjb25zdCBhaUJvYXJkID0gYWlQbGF5ZXIuZ2V0Qm9hcmQoKTtcblxuICAgICAgICBfZmlsbEFpQm9hcmQoYWlCb2FyZCk7XG5cbiAgICAgICAgZGlzcGxheUNvbnRyb2xsZXIucmVuZGVyQm9hcmRzKGh1bWFuQm9hcmQsIGFpQm9hcmQpO1xuICAgIH1cblxuICAgIGNvbnN0IGNoYW5nZVR1cm4gPSAoKSA9PiB7XG4gICAgICAgIGlmICghZ2FtZU92ZXIpIHtcbiAgICAgICAgICAgIGlmIChodW1hblBsYXllci5nZXRUdXJuKCkpIHtcbiAgICAgICAgICAgICAgICBodW1hblBsYXllci5zZXRUdXJuKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBhaVBsYXllci5zZXRUdXJuKHRydWUpO1xuICAgICAgICAgICAgICAgIC8vIGRpc3BsYXlDb250cm9sbGVyLnJlbmRlclN0YXR1cyhcIkl0J3MgQUkncyB0dXJuIVwiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBodW1hbkJvYXJkID0gZ2V0SHVtYW5Cb2FyZCgpO1xuICAgICAgICAgICAgICAgIF9tYWtlQUlNb3ZlKGh1bWFuQm9hcmQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBodW1hblBsYXllci5zZXRUdXJuKHRydWUpO1xuICAgICAgICAgICAgICAgIGFpUGxheWVyLnNldFR1cm4oZmFsc2UpO1xuICAgICAgICAgICAgICAgIC8vIGRpc3BsYXlDb250cm9sbGVyLnJlbmRlclN0YXR1cyhcIkl0J3MgeW91ciB0dXJuIVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHdpbm5lciA9IF9nZXRXaW5uZXIoKTtcbiAgICAgICAgICAgIGRpc3BsYXlDb250cm9sbGVyLnJlbmRlclN0YXR1cyhgJHt3aW5uZXJ9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBfZ2V0V2lubmVyID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gKGh1bWFuUGxheWVyLmdldEJvYXJkKCkuaXNBbGxTdW5rKCkpID8gXCJBSSBoYXMgd29uIVwiIDogXCJZb3UgaGF2ZSB3b24hXCI7XG4gICAgfVxuXG4gICAgY29uc3QgY2hlY2tWYWxpZFR1cm4gPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBodW1hblBsYXllci5nZXRUdXJuKCk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0SHVtYW5Cb2FyZCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGh1bWFuUGxheWVyLmdldEJvYXJkKCk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0QWlCb2FyZCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGFpUGxheWVyLmdldEJvYXJkKCk7XG4gICAgfVxuXG4gICAgY29uc3QgY2hlY2tHYW1lT3ZlciA9ICgpID0+IHtcbiAgICAgICAgaWYgKGh1bWFuUGxheWVyLmdldEJvYXJkKCkuaXNBbGxTdW5rKCkgfHwgYWlQbGF5ZXIuZ2V0Qm9hcmQoKS5pc0FsbFN1bmsoKSkge1xuICAgICAgICAgICAgZ2FtZU92ZXIgPSB0cnVlO1xuICAgICAgICAgICAgZGlzcGxheUNvbnRyb2xsZXIucmVuZGVyUmVzZXRCdG4oKTtcbiAgICAgICAgfSBcbiAgICB9XG5cbiAgICBjb25zdCBnZXRHYW1lT3ZlciA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGdhbWVPdmVyOyBcbiAgICB9XG5cbiAgICBjb25zdCBjaGVja1NoaXBTdW5rID0gKHBsYXllciwgc2hpcE5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgaHVtYW5Cb2FyZCA9IGdldEh1bWFuQm9hcmQoKTtcbiAgICAgICAgY29uc3QgYWlCb2FyZCA9IGdldEFpQm9hcmQoKTtcblxuICAgICAgICBpZiAocGxheWVyID09PSBcImh1bWFuXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBodW1hbkJvYXJkLmdldFNoaXBCeU5hbWUoc2hpcE5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHNoaXAuaXNTdW5rKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzaGlwID0gYWlCb2FyZC5nZXRTaGlwQnlOYW1lKHNoaXBOYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBzaGlwLmlzU3VuaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcmVzZXRHYW1lLCBjaGFuZ2VUdXJuLCBjaGVja1ZhbGlkVHVybiwgZ2V0SHVtYW5Cb2FyZCwgZ2V0QWlCb2FyZCwgY2hlY2tHYW1lT3ZlciwgZ2V0R2FtZU92ZXIsXG4gICAgICAgIGNoZWNrU2hpcFN1bmssIHN0aWxsUGxhY2luZ0h1bWFuU2hpcHMsIHNldFJvdGF0aW9uQXhpcywgZ2V0Um90YXRpb25BeGlzLCBnZXRDdXJyZW50U2hpcFBsYWNlbWVudCxcbiAgICAgICAgZ2V0U2hpcEJ5TmFtZSwgaHVtYW5QbGFjZVNoaXAgfVxufSkoKTtcblxuZXhwb3J0IHsgbG9naWNDb250cm9sbGVyIH0iLCJpbXBvcnQgXCIuL3N0eWxlcy9yZXNldC5jc3NcIjtcbmltcG9ydCBcIi4vc3R5bGVzL3N0eWxlcy5jc3NcIjtcbmltcG9ydCB7IGxvZ2ljQ29udHJvbGxlciB9IGZyb20gXCIuL2RvbS9kb20ubG9naWNcIjtcblxubG9naWNDb250cm9sbGVyLnJlc2V0R2FtZSgpOyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJyZXBsYWNlIiwicCIsInNoaXBGYWN0b3J5Iiwic2hpcE5hbWUiLCJuYW1lIiwic3RhdHVzIiwiaGl0IiwiaXNTdW5rIiwiUGxheWVyIiwiY29uc3RydWN0b3IiLCJ0dXJuIiwiYm9hcmQiLCJncmlkIiwiZGVzdHJveWVyIiwic3ViIiwiY3J1aXNlciIsImJhdHRsZXNoaXAiLCJjYXJyaWVyIiwic2hpcHMiLCJzaGlwSGVhZHMiLCJjaGVja09yaWVudGF0aW9uIiwiY29vcmQiLCJzaGlwIiwiY29sIiwicm93IiwicGxhY2VTaGlwIiwiY29vcmRzIiwiY2hlY2tWYWxpZFNob3QiLCJzaGlwSGVhZCIsInNoaXBIZWFkQ29sIiwic2hpcEhlYWRSb3ciLCJkaWZmZXJlbmNlIiwicmVjZWl2ZUF0dGFjayIsImlzQWxsU3VuayIsImdldENvbnRlbnRCeUNvb3JkIiwiZ2V0U2hpcEJ5TmFtZSIsImdhbWVib2FyZEZhY3RvcnkiLCJzZXRUdXJuIiwidmFsdWUiLCJnZXRCb2FyZCIsImdldFR1cm4iLCJBSVBsYXllciIsInN1cGVyIiwiSHVtYW5QbGF5ZXIiLCJtYWtlTW92ZSIsImVuZW15Qm9hcmQiLCJyb3RhdGUiLCJnZXRFbGVtZW50QnlJZCIsImRldGVjdENvbnRyb2xsZXIiLCJjb29yZFRvSWQiLCJjaGVja0FscmVhZHlQbGFjZWRTaGlwIiwic3F1YXJlcyIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxvZ2ljQ29udHJvbGxlciIsInJlc2V0R2FtZSIsImdldFJvdGF0aW9uQXhpcyIsInNldFJvdGF0aW9uQXhpcyIsImRldGVjdFNxdWFyZUNsaWNrIiwic3F1YXJlIiwic3F1YXJlTmFtZSIsImJvYXJkTmFtZSIsImRpc3BsYXlDb250cm9sbGVyIiwiZ2V0Qm9hcmROYW1lIiwiZ2V0U3F1YXJlQ29vcmRzIiwiaHVtYW5Cb2FyZCIsImdldEh1bWFuQm9hcmQiLCJhaUJvYXJkIiwiZ2V0QWlCb2FyZCIsImNoZWNrVmFsaWRUdXJuIiwiZ2V0R2FtZU92ZXIiLCJzdGlsbFBsYWNpbmdIdW1hblNoaXBzIiwicmVuZGVyQm9hcmRzIiwiY2hlY2tHYW1lT3ZlciIsImNoYW5nZVR1cm4iLCJkZXRlY3RTcXVhcmVIb3ZlciIsIkJPQVJEX1NJREUiLCJqIiwicmVtb3ZlU3F1YXJlSG92ZXJzIiwiZ2V0Q3VycmVudFNoaXBQbGFjZW1lbnQiLCJyZW5kZXJTdGF0dXMiLCJwYXJzZUludCIsImhlYWRTcXVhcmUiLCJzcXVhcmVPbmVUb1JpZ2h0IiwiYWRkIiwic3F1YXJlVHdvVG9SaWdodCIsInNxdWFyZVRocmVlVG9SaWdodCIsInNxdWFyZUZvdXJUb1JpZ2h0Iiwic3F1YXJlT25lRG93biIsInNxdWFyZVR3b0Rvd24iLCJzcXVhcmVUaHJlZURvd24iLCJzcXVhcmVGb3VyRG93biIsImRpc3BsYXkiLCJkZXRlY3RIdW1hblNxdWFyZUNsaWNrIiwiY2hlY2tGb3JHcmVlblNxdWFyZXMiLCJpc1ZhbGlkIiwiY2hlY2tGb3JJbnZhbGlkU3F1YXJlcyIsImh1bWFuUGxhY2VTaGlwIiwiZGV0ZWN0QWlTcXVhcmVIb3ZlciIsImJhY2tncm91bmRDb2xvciIsInJlc2V0QWxsVG9XaGl0ZUJ1dFNob3RCZWZvcmUiLCJjdXJzb3IiLCJ5b3VyQm9hcmQiLCJocmVmIiwidGV4dCIsImlubmVyVGV4dCIsImJvYXJkMSIsImJvYXJkMiIsImlubmVySFRNTCIsImJvYXJkMUNvbnRlbnQiLCJib2FyZDJDb250ZW50IiwieW91clNxdWFyZSIsInhNYXJrIiwiY2hlY2tTaGlwU3VuayIsImFpU3F1YXJlIiwic3Vic3RyaW5nIiwicmVuZGVyUmVzZXRCdG4iLCJyZW5kZXJSb3RhdGVCdG4iLCJoaWRlUmVzZXRCdG4iLCJnZW5lcmF0ZVJhbmRvbU51bWJlciIsIm1pbiIsIm1heCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImdhbWVPdmVyIiwiaHVtYW5QbGF5ZXIiLCJhaVBsYXllciIsIl9nZXRYQ29vcmRzIiwiaGVhZENvbCIsImhlYWRSb3ciLCJfZ2V0WUNvb3JkcyIsIl9yZXNldENoYW5nZWRDb29yZHMiLCJ0ZW1wR3JpZCIsIml0aENvb3JkcyIsIl9jaGVja0Nvb3JkcyIsInRlbXBDb29yZHMiLCJjdXJyZW50U2hpcFBsYWNlbWVudCIsInJvdGF0aW9uQXhpcyIsInNoaXBQbGFjZW1lbnRTdGF0dXNlcyIsIndpbm5lciIsIl9nZXRXaW5uZXIiLCJpc1ZhbGlkQ29vcmQiLCJ4Q29vcmQiLCJ5Q29vcmQiLCJfbWFrZUFJTW92ZSIsIl9yZXNldFNoaXBTdGF0dXNlcyIsImlzR29vZFBsYWNlbWVudCIsInJvdW5kIiwiX2ZpbGxBaUJvYXJkIiwicGxheWVyIl0sInNvdXJjZVJvb3QiOiIifQ==