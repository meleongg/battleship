(()=>{"use strict";var e={434:(e,n,t)=>{t.d(n,{Z:()=>d});var a=t(537),s=t.n(a),i=t(645),r=t.n(i)()(s());r.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA;IACI,sBAAsB;AAC1B",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}"],sourceRoot:""}]);const d=r},772:(e,n,t)=>{t.d(n,{Z:()=>d});var a=t(537),s=t.n(a),i=t(645),r=t.n(i)()(s());r.push([e.id,"body {\n    font-family: 'Oxygen', sans-serif;\n    background-color: #003B73;\n    display: grid;\n    row-gap: 40px;\n    justify-content: center;\n    align-content: center;\n    color: #FFF;\n}\n\n#content {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\nheader {\n    padding-top: 40px;\n}\n\nnav {\n    text-align: center;\n}\n\n#title {\n    font-size: 40px;\n    font-weight: 700;\n}\n\n#status-container {\n    border: 2px solid #FFF;\n    padding: 20px 0;\n    width: 400px;\n    margin: 0 auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #333;\n}\n\n#status-message {\n    font-size: 25px;\n    text-align: center;\n}\n\n#boards {\n    width: 90vw;\n    /* height: 600px; */\n    display: grid;\n    grid-template-columns: 1fr;\n    justify-items: center;\n    align-content: center;\n}\n\n#your-board, #ai-board {\n    width: 350px;\n    height: 350px;\n    background-color: #333;\n    row-gap: 1px;\n    column-gap: 1px;\n    border: #333 solid 10px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n.board-container {\n    display: flex;\n    flex-direction: column;\n    justify-items: center;\n    align-items: center;\n}\n\n.waters-title {\n    padding: 20px 0 20px 0;\n}\n\n#rotate-btn-container {\n    padding: 10px 0 10px 0;\n}\n\n#rotate-btn, #reset-btn {\n    font-size: 14px;\n    padding: 5px 10px;\n}\n\n#reset-game {\n    display: flex;\n    justify-content: center;\n    padding: 20px 0 20px 0;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n.square {\n    background-color: #FFF;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #333;\n}\n\n.square > * {\n    font-size: 25px;\n}\n\n.shot-before {\n    background-color: #808080;\n}\n\n.ship-sunk {\n    background-color: #DC143C;\n}\n\n.your-ship {\n    background-color: #808080;\n}\n\n.placement-hover {\n    background-color: #00FF00;\n}\n\n.placement-hover:hover {\n    cursor: pointer;\n}\n\n.invalid-placement {\n    background-color: #DC143C;\n}\n\n@media only screen and (max-width: 800px) {\n    #boards {\n        width: 80vw;\n        grid-template-columns: 1fr !important;\n    }\n\n    #your-board, #ai-board {\n        width: 350px; \n        height: 350px;\n    }\n\n    #status-container {\n        width: 400px;\n    }\n    \n    #status-message {\n        font-size: 20px;\n    }\n\n    #title {\n        font-size: 34px;\n    }\n\n    .square > * {\n        font-size: 20px;\n    }\n}\n\n@media only screen and (max-width: 400px) {\n    #boards {\n        width: 65vw;\n        grid-template-columns: 1fr !important;\n    }\n\n    #your-board, #ai-board {\n        width: 200px; \n        height: 200px;\n    }\n\n    #status-container {\n        width: 200px;\n    }\n    \n    #status-message {\n        font-size: 16px;\n    }\n\n    #title {\n        font-size: 30px;\n    }\n\n    .square > * {\n        font-size: 14px;\n    }\n}","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;IACI,iCAAiC;IACjC,yBAAyB;IACzB,aAAa;IACb,aAAa;IACb,uBAAuB;IACvB,qBAAqB;IACrB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,YAAY;IACZ,cAAc;IACd,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,aAAa;IACb,0BAA0B;IAC1B,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,eAAe;IACf,uBAAuB;IACvB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,qBAAqB;IACrB,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI;QACI,WAAW;QACX,qCAAqC;IACzC;;IAEA;QACI,YAAY;QACZ,aAAa;IACjB;;IAEA;QACI,YAAY;IAChB;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,eAAe;IACnB;AACJ;;AAEA;IACI;QACI,WAAW;QACX,qCAAqC;IACzC;;IAEA;QACI,YAAY;QACZ,aAAa;IACjB;;IAEA;QACI,YAAY;IAChB;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,eAAe;IACnB;AACJ",sourcesContent:["body {\n    font-family: 'Oxygen', sans-serif;\n    background-color: #003B73;\n    display: grid;\n    row-gap: 40px;\n    justify-content: center;\n    align-content: center;\n    color: #FFF;\n}\n\n#content {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\nheader {\n    padding-top: 40px;\n}\n\nnav {\n    text-align: center;\n}\n\n#title {\n    font-size: 40px;\n    font-weight: 700;\n}\n\n#status-container {\n    border: 2px solid #FFF;\n    padding: 20px 0;\n    width: 400px;\n    margin: 0 auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #333;\n}\n\n#status-message {\n    font-size: 25px;\n    text-align: center;\n}\n\n#boards {\n    width: 90vw;\n    /* height: 600px; */\n    display: grid;\n    grid-template-columns: 1fr;\n    justify-items: center;\n    align-content: center;\n}\n\n#your-board, #ai-board {\n    width: 350px;\n    height: 350px;\n    background-color: #333;\n    row-gap: 1px;\n    column-gap: 1px;\n    border: #333 solid 10px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    justify-items: center;\n    align-content: center;\n}\n\n.board-container {\n    display: flex;\n    flex-direction: column;\n    justify-items: center;\n    align-items: center;\n}\n\n.waters-title {\n    padding: 20px 0 20px 0;\n}\n\n#rotate-btn-container {\n    padding: 10px 0 10px 0;\n}\n\n#rotate-btn, #reset-btn {\n    font-size: 14px;\n    padding: 5px 10px;\n}\n\n#reset-game {\n    display: flex;\n    justify-content: center;\n    padding: 20px 0 20px 0;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n.square {\n    background-color: #FFF;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #333;\n}\n\n.square > * {\n    font-size: 25px;\n}\n\n.shot-before {\n    background-color: #808080;\n}\n\n.ship-sunk {\n    background-color: #DC143C;\n}\n\n.your-ship {\n    background-color: #808080;\n}\n\n.placement-hover {\n    background-color: #00FF00;\n}\n\n.placement-hover:hover {\n    cursor: pointer;\n}\n\n.invalid-placement {\n    background-color: #DC143C;\n}\n\n@media only screen and (max-width: 800px) {\n    #boards {\n        width: 80vw;\n        grid-template-columns: 1fr !important;\n    }\n\n    #your-board, #ai-board {\n        width: 350px; \n        height: 350px;\n    }\n\n    #status-container {\n        width: 400px;\n    }\n    \n    #status-message {\n        font-size: 20px;\n    }\n\n    #title {\n        font-size: 34px;\n    }\n\n    .square > * {\n        font-size: 20px;\n    }\n}\n\n@media only screen and (max-width: 400px) {\n    #boards {\n        width: 65vw;\n        grid-template-columns: 1fr !important;\n    }\n\n    #your-board, #ai-board {\n        width: 200px; \n        height: 200px;\n    }\n\n    #status-container {\n        width: 200px;\n    }\n    \n    #status-message {\n        font-size: 16px;\n    }\n\n    #title {\n        font-size: 30px;\n    }\n\n    .square > * {\n        font-size: 14px;\n    }\n}"],sourceRoot:""}]);const d=r},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",a=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),a&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),a&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,a,s,i){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(a)for(var d=0;d<this.length;d++){var o=this[d][0];null!=o&&(r[o]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);a&&r[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),s&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=s):l[4]="".concat(s)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(s," */"),r=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(r).concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,a=0;a<n.length;a++)if(n[a].identifier===e){t=a;break}return t}function a(e,a){for(var i={},r=[],d=0;d<e.length;d++){var o=e[d],c=a.base?o[0]+a.base:o[0],l=i[c]||0,A="".concat(c," ").concat(l);i[c]=l+1;var u=t(A),p={css:o[1],media:o[2],sourceMap:o[3],supports:o[4],layer:o[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var m=s(p,a);a.byIndex=d,n.splice(d,0,{identifier:A,updater:m,references:1})}r.push(A)}return r}function s(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,s){var i=a(e=e||[],s=s||{});return function(e){e=e||[];for(var r=0;r<i.length;r++){var d=t(i[r]);n[d].references--}for(var o=a(e,s),c=0;c<i.length;c++){var l=t(i[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=o}}},569:e=>{var n={};e.exports=function(e,t){var a=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var s=void 0!==t.layer;s&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,s&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(a,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(a){var s=n[a];if(void 0!==s)return s.exports;var i=n[a]={id:a,exports:{}};return e[a](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var a=n.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{var e=t(379),n=t.n(e),a=t(795),s=t.n(a),i=t(569),r=t.n(i),d=t(565),o=t.n(d),c=t(216),l=t.n(c),A=t(589),u=t.n(A),p=t(434),m={};m.styleTagTransform=u(),m.setAttributes=o(),m.insert=r().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=l(),n()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;var h=t(772),g={};g.styleTagTransform=u(),g.setAttributes=o(),g.insert=r().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=l(),n()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;const f=(e,n)=>{const t=e;let a=[];for(let e=0;e<n;e++)a.push("not hit");return{name:t,status:a,hit:e=>{a[e]="hit"},isSunk:()=>{for(let e=0;e<n;e++)if("not hit"===a[e])return!1;return!0}}};class v{constructor(e){this.board=(()=>{let e=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]];const n=f("destroyer",2),t=f("sub",3),a=f("cruiser",3),s=f("battleship",4),i=f("carrier",5);let r=[n,t,a,s,i],d={};const o=(n,t)=>{const a=n[0],s=n[1];return a+1>9?"y":e[a+1][s]===t||s+1>9?"x":"y"};return{ships:r,grid:e,placeShip:(n,t)=>{d[`${t.name}`]=n[0];for(let a=0;a<n.length;a++){let s=n[a],i=s[0],r=s[1];e[i][r]=t.name}},checkValidShot:(r,c)=>{if("miss"===e[r][c])return!1;if(""===e[r][c])return!0;{const l=e[r][c],A=d[l],u=A[0],p=A[1];let m;switch(m="x"===o(A,l)?r-u:c-p,l){case"destroyer":return"hit"!==n.status[m];case"sub":return"hit"!==t.status[m];case"cruiser":return"hit"!==a.status[m];case"battleship":return"hit"!==s.status[m];default:return"hit"!==i.status[m]}}},receiveAttack:r=>{const c=r[0],l=r[1];if(""!==e[c][l]&&"miss"!==e[c][l]){const r=e[c][l],A=d[r],u=A[0],p=A[1];let m;switch(m="x"===o(A,r)?c-u:l-p,r){case"destroyer":n.hit(m);break;case"sub":t.hit(m);break;case"cruiser":a.hit(m);break;case"battleship":s.hit(m);break;default:i.hit(m)}}else e[c][l]="miss"},isAllSunk:()=>{for(let e=0;e<r.length;e++)if(!r[e].isSunk())return!1;return!0},getContentByCoord:(n,t)=>e[n][t],getShipByName:e=>{for(let n=0;n<r.length;n++)if(r[n].name===e)return r[n]},checkHitShip:(r,c)=>{if("miss"===e[r][c])return!1;if(""===e[r][c])return!1;{const l=e[r][c],A=d[l],u=A[0],p=A[1];let m;switch(m="x"===o(A,l)?r-u:c-p,l){case"destroyer":return"hit"!==n.status[m]&&"destroyer";case"sub":return"hit"!==t.status[m]&&"sub";case"cruiser":return"hit"!==a.status[m]&&"cruiser";case"battleship":return"hit"!==s.status[m]&&"battleship";default:return"hit"!==i.status[m]&&"carrier"}}}}})(),this.turn=e}setTurn(e){this.turn=e}getBoard(){return this.board}getTurn(){return this.turn}}class B extends v{constructor(e){super(e)}}class C extends v{constructor(e){super(e)}makeMove(e,n){n.receiveAttack(e)}}const y=document.getElementById("rotate-btn"),b=document.getElementById("reset-btn"),I=(()=>{const e=(e,n)=>`your-square-${e}-${n}`,n=e=>{for(let n=0;n<e.length;n++)if(e[n].classList.contains("your-ship"))return!0;return!1};return b.addEventListener("click",(()=>{H.resetGame()})),y.addEventListener("click",(()=>{"x"===H.getRotationAxis()?H.setRotationAxis("y"):H.setRotationAxis("x")})),{detectSquareClick:e=>{e.addEventListener("click",(()=>{const n=e.id,t=F.getBoardName(n),a=F.getSquareCoords(n,t),s=H.getHumanBoard(),i=H.getAiBoard(),r=a[0],d=a[1];i.checkValidShot(r,d)&&H.checkValidTurn()&&!H.getGameOver()&&!H.stillPlacingHumanShips()&&(i.receiveAttack([r,d]),F.renderBoards(s,i),H.checkGameOver(),H.changeTurn())}))},detectSquareHover:t=>{t.addEventListener("mouseover",(()=>{if((()=>{for(let n=0;n<z;n++)for(let t=0;t<z;t++){const a=e(n,t),s=document.getElementById(a);s.classList.contains("placement-hover")&&s.classList.remove("placement-hover"),s.classList.contains("invalid-placement")&&s.classList.remove("invalid-placement")}})(),H.stillPlacingHumanShips()){const a=H.getCurrentShipPlacement();F.renderStatus(`Place your ${a}!`);const s=t.id,i=F.getBoardName(s),r=F.getSquareCoords(s,i),d=parseInt(r[0]),o=parseInt(r[1]);if("x"===H.getRotationAxis()){if("destroyer"===a){const n=document.getElementById(e(d,o)),t=document.getElementById(e(d+1,o));d<9?(n.classList.add("placement-hover"),t.classList.add("placement-hover")):n.classList.add("invalid-placement")}if("sub"===a){const t=document.getElementById(e(d,o)),a=document.getElementById(e(d+1,o)),s=document.getElementById(e(d+2,o));d<8?n([t,a,s])?(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(t.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===d?t.classList.add("invalid-placement"):(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("cruiser"===a){const t=document.getElementById(e(d,o)),a=document.getElementById(e(d+1,o)),s=document.getElementById(e(d+2,o));d<8?n([t,a,s])?(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(t.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===d?t.classList.add("invalid-placement"):(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("battleship"===a){const t=document.getElementById(e(d,o)),a=document.getElementById(e(d+1,o)),s=document.getElementById(e(d+2,o)),i=document.getElementById(e(d+3,o));d<7?n([t,a,s,i])?(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement")):(t.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover")):9===d?t.classList.add("invalid-placement"):8===d?(t.classList.add("invalid-placement"),a.classList.add("invalid-placement")):(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"))}if("carrier"===a){const t=document.getElementById(e(d,o)),a=document.getElementById(e(d+1,o)),s=document.getElementById(e(d+2,o)),i=document.getElementById(e(d+3,o)),r=document.getElementById(e(d+4,o));d<6?n([t,a,s,i,r])?(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"),r.classList.add("invalid-placement")):(t.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover"),r.classList.add("placement-hover")):9===d?t.classList.add("invalid-placement"):8===d?(t.classList.add("invalid-placement"),a.classList.add("invalid-placement")):7===d?(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"))}}else{if("destroyer"===a){const n=document.getElementById(e(d,o)),t=document.getElementById(e(d,o+1));o<9?(n.classList.add("placement-hover"),t.classList.add("placement-hover")):n.classList.add("invalid-placement")}if("sub"===a){const t=document.getElementById(e(d,o)),a=document.getElementById(e(d,o+1)),s=document.getElementById(e(d,o+2));o<8?n([t,a,s])?(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(t.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===o?t.classList.add("invalid-placement"):(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("cruiser"===a){const t=document.getElementById(e(d,o)),a=document.getElementById(e(d,o+1)),s=document.getElementById(e(d,o+2));o<8?n([t,a,s])?(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(t.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover")):9===o?t.classList.add("invalid-placement"):(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"))}if("battleship"===a){const t=document.getElementById(e(d,o)),a=document.getElementById(e(d,o+1)),s=document.getElementById(e(d,o+2)),i=document.getElementById(e(d,o+3));o<7?n([t,a,s,i])?(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement")):(t.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover")):9===o?t.classList.add("invalid-placement"):8===o?(t.classList.add("invalid-placement"),a.classList.add("invalid-placement")):(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"))}if("carrier"===a){const t=document.getElementById(e(d,o)),a=document.getElementById(e(d,o+1)),s=document.getElementById(e(d,o+2)),i=document.getElementById(e(d,o+3)),r=document.getElementById(e(d,o+4));o<6?n([t,a,s,i,r])?(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"),r.classList.add("invalid-placement")):(t.classList.add("placement-hover"),a.classList.add("placement-hover"),s.classList.add("placement-hover"),i.classList.add("placement-hover"),r.classList.add("placement-hover")):9===o?t.classList.add("invalid-placement"):8===o?(t.classList.add("invalid-placement"),a.classList.add("invalid-placement")):7===o?(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement")):(t.classList.add("invalid-placement"),a.classList.add("invalid-placement"),s.classList.add("invalid-placement"),i.classList.add("invalid-placement"))}}}else F.hideRotateBtn()}))},detectHumanSquareClick:n=>{n.addEventListener("click",(()=>{if(H.stillPlacingHumanShips()){const n=(()=>{let n=[];for(let t=0;t<z;t++)for(let a=0;a<z;a++){const s=e(t,a);document.getElementById(s).classList.contains("placement-hover")&&n.push([t,a])}return n})(),t=(()=>{for(let n=0;n<z;n++)for(let t=0;t<z;t++){const a=e(n,t);if(document.getElementById(a).classList.contains("invalid-placement"))return!1}return!0})(),a=H.getCurrentShipPlacement(),s=H.getShipByName(a),i=H.getHumanBoard(),r=H.getAiBoard();t&&H.humanPlaceShip(i,n,s),F.renderBoards(i,r)}}))},detectAiSquareHover:e=>{e.addEventListener("mouseover",(()=>{(()=>{for(let e=0;e<z;e++)for(let n=0;n<z;n++){const t=`ai-square-${e}-${n}`,a=document.getElementById(t);a.classList.contains("shot-before")||(a.style.backgroundColor="#FFF")}})(),H.getGameOver()||H.stillPlacingHumanShips()||e.classList.contains("miss")||e.classList.contains("shot-before")||(e.style.cursor="pointer",e.style.backgroundColor="#808080")}))}}})(),L=t.p+"ae34fa137741510dbffd.png",x=document.getElementById("status-message"),E=document.getElementById("your-board"),k=document.getElementById("ai-board-container"),w=document.getElementById("ai-board"),S=document.getElementById("boards"),q=document.getElementById("rotate-btn"),T=document.getElementById("rotate-btn-container"),j=document.getElementById("reset-btn");document.getElementById("icon").href=L;const z=10,F={renderStatus:e=>{x.innerText=e},renderBoards:(e,n)=>{E.innerHTML="",w.innerHTML="";for(let t=0;t<z;t++)for(let a=0;a<z;a++){let s=e.getContentByCoord(a,t),i=n.getContentByCoord(a,t);const r=document.createElement("div");if(r.classList.add("square"),r.id=`your-square-${a}-${t}`,E.appendChild(r),I.detectSquareHover(r),I.detectHumanSquareClick(r),"miss"===s){const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark"),r.classList.add("miss"),r.appendChild(e)}else if(""===s);else if(e.checkValidShot(a,t))r.classList.add("your-ship");else{r.classList.add("shot-before");const n=e.getContentByCoord(a,t);H.checkShipSunk("human",n)&&r.classList.add("ship-sunk");const s=document.createElement("i");s.classList.add("fa-solid"),s.classList.add("fa-xmark"),r.appendChild(s)}const d=document.createElement("div");if(d.classList.add("square"),d.id=`ai-square-${a}-${t}`,w.appendChild(d),I.detectSquareClick(d),I.detectAiSquareHover(d),"miss"===i){const e=document.createElement("i");e.classList.add("fa-solid"),e.classList.add("fa-xmark"),d.classList.add("miss"),d.appendChild(e)}else if(""===i);else if(!n.checkValidShot(a,t)){d.classList.add("shot-before");const e=n.getContentByCoord(a,t);H.checkShipSunk("ai",e)&&d.classList.add("ship-sunk");const s=document.createElement("i");s.classList.add("fa-solid"),s.classList.add("fa-xmark"),d.appendChild(s)}}},getBoardName:e=>"y"===e[0]?"you":"ai",getSquareCoords:(e,n)=>{let t=[];if("you"===n){const n=e.substring(12,13),a=e.substring(14,15);t.push(n),t.push(a)}else{const n=e.substring(10,11),a=e.substring(12,13);t.push(n),t.push(a)}return t},renderResetBtn:()=>{j.style.display="block"},renderRotateBtn:()=>{q.style.display="block",T.style.display="block"},hideResetBtn:()=>{j.style.display="none"},hideRotateBtn:()=>{q.style.display="none",T.style.display="none"},renderAiBoard:()=>{k.style.display="grid",S.style.gridTemplateColumns="repeat(2, 1fr)"},hideAiBoard:()=>{k.style.display="none",S.style.gridTemplateColumns="1fr"}},R=(e,n)=>Math.floor(Math.random()*(n-e+1)+e),H=(()=>{let e,n,t,a=f("destroyer",2),s=f("sub",3),i=f("cruiser",3),r=f("battleship",4),d=f("carrier",5),o=[a,s,i,r,d];const c=e=>{let n,t;return"destroyer"===e?(n=R(0,8),t=R(0,9),[[n,t],[n+1,t]]):"sub"===e?(n=R(0,7),t=R(0,9),[[n,t],[n+1,t],[n+2,t]]):"cruiser"===e?(n=R(0,6),t=R(0,9),[[n,t],[n+1,t],[n+2,t]]):"battleship"===e?(n=R(0,6),t=R(0,9),[[n,t],[n+1,t],[n+2,t],[n+3,t]]):"carrier"===e?(n=R(0,5),t=R(0,9),[[n,t],[n+1,t],[n+2,t],[n+3,t],[n+4,t]]):void 0},l=e=>{let n,t;return"destroyer"===e?(n=R(0,9),t=R(0,8),[[n,t],[n,t+1]]):"sub"===e?(n=R(0,9),t=R(0,7),[[n,t],[n,t+1],[n,t+2]]):"cruiser"===e?(n=R(0,9),t=R(0,6),[[n,t],[n,t+1],[n,t+2]]):"battleship"===e?(n=R(0,9),t=R(0,6),[[n,t],[n,t+1],[n,t+2],[n,t+3]]):"carrier"===e?(n=R(0,9),t=R(0,5),[[n,t],[n,t+1],[n,t+2],[n,t+3],[n,t+4]]):void 0},A=(e,n)=>{for(let t=0;t<e.length;t++){const a=e[t],s=a[0],i=a[1];n[s][i]=""}},u=(e,n,t)=>{const a=[];for(let s=0;s<n.length;s++){const i=n[s],r=i[0],d=i[1];if(""!==t[r][d])return A(a,t),!1;t[r][d]=e,a.push([r,d])}return!0};let p,m="x",h={destroyer:!1,sub:!1,cruiser:!1,battleship:!1,carrier:!1};const g=()=>{if(e){const e=v();F.renderStatus(`${e}`)}else n.getTurn()?(n.setTurn(!1),t.setTurn(!0),(e=>{let n=!1;const t=y(),a=b();for(;!n;){let t=R(0,9),a=R(0,9);e.checkValidShot(t,a)&&(e.receiveAttack([t,a]),n=!0)}F.renderBoards(t,a),I(),g()})(y())):(n.setTurn(!0),t.setTurn(!1))},v=()=>n.getBoard().isAllSunk()?"AI has won!":"You have won!",y=()=>n.getBoard(),b=()=>t.getBoard(),I=()=>{(n.getBoard().isAllSunk()||t.getBoard().isAllSunk())&&(e=!0,F.renderResetBtn())};return{resetGame:()=>{e=!1,(()=>{for(const e in h)h[e]=!1})(),n=new C(!0),t=new B(!1),n.setTurn(!0),t.setTurn(!1),F.renderStatus("Place your destroyer!"),F.renderRotateBtn(),F.hideResetBtn(),F.hideAiBoard();const a=n.getBoard(),s=t.getBoard();(e=>{let n=[["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""],["","","","","","","","","",""]];for(let t=0;t<o.length;t++){const a=o[t],s=a.name;let i=!1;for(;!i;){let t;t="x"==(0===Math.round(Math.random())?"x":"y")?c(s):l(s),u(s,t,n)&&(e.placeShip(t,a),i=!0)}}})(s),F.renderBoards(a,s)},changeTurn:g,checkValidTurn:()=>n.getTurn(),getHumanBoard:y,getAiBoard:b,checkGameOver:I,getGameOver:()=>e,checkShipSunk:(e,n)=>{const t=y(),a=b();return"human"===e?t.getShipByName(n).isSunk():a.getShipByName(n).isSunk()},stillPlacingHumanShips:()=>{for(const e in h)if(!h[e])return!0;return I()||F.renderStatus("It's your turn to attack!"),F.renderAiBoard(),!1},setRotationAxis:e=>{m=e},getRotationAxis:()=>m,getCurrentShipPlacement:()=>{for(const e in h)if(!h[e])return p=e,p},getShipByName:e=>{switch(e){case"destroyer":return a;case"sub":return s;case"cruiser":return i;case"battleship":return r;default:return d}},humanPlaceShip:(e,n,t)=>{e.placeShip(n,t),h[t.name]=!0}}})();H.resetGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,